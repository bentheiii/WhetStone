using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using WhetStone.Arrays;
using WhetStone.Arrays.Arr2D;
using WhetStone.Fielding;
using WhetStone.Guard;
using WhetStone.Looping;
using WhetStone.Matrix;
using WhetStone.Random;
using WhetStone.RecursiveQuerier;
using WhetStone.SystemExtensions;
using WhetStone.Tuples;
using Numerics;

namespace WhetStone.NumbersMagic
{
	public static class NumberMagic
	{
		public const double Phi = 1.618033988749894848204586834365638117720309179805762862;
		public const double Tau = 2 * Math.PI;
	    public const double MillsConstant = 1.3063778838630806904686144926;
	    public const double PrimeConstant = 0.414682509851111660248109622;
        public static BigInteger Ackermann(int a, int b)
        {
            return Ackermann(new BigInteger(a), new BigInteger(b));
        }
        public static BigInteger Ackermann(long a, long b)
        {
            return Ackermann(new BigInteger(a), new BigInteger(b));
        }
        public static BigInteger Ackermann(BigInteger a, BigInteger b)
	    {
	        while (true)
	        {
	            if (a < 0 || b < 0)
	            {
	                throw new Exception("invalid arguments");
	            }
	            if (a == 0)
	            {
	                return b + 1;
	            }
	            if (b == 0)
	            {
	                a = a - 1;
	                b = 1;
	                continue;
	            }
	            var a1 = a;
	            a = a - 1;
	            b = Ackermann(a1, b - 1);
	        }
	    }
	    public static BigInteger Ackermann(int a, int b, int order)
	    {
            return Ackermann(new BigInteger(a), new BigInteger(b), order);
        }
        public static BigInteger Ackermann(long a, long b, int order)
        {
            return Ackermann(new BigInteger(a), new BigInteger(b), order);
        }
        public static BigInteger Ackermann(BigInteger a, BigInteger b, int order)
        {
            while (true)
            {
                if (order < 0 || b < 0)
                {
                    throw new ArithmeticException("invalid arguments");
                }
                switch (order)
                {
                    case 0:
                        return a + b;
                    case 1:
                        return a * b;
                    case 2:
                        return a.pow(b);
                }
                if (b == 0)
                {
                    return 1;
                }
                var a1 = a;
                b = Ackermann(a1, b - 1, order);
                order = order - 1;
            }
        }
	    public static BigInteger ApproximateRoot(BigInteger a, BigInteger invPow)
	    {
	        BigInteger x0 = -a;
	        BigInteger x1 = a / 2;
	        while (BigInteger.Abs(x0 - x1) >= BigInteger.One)
	        {
	            x0 = x1;
	            x1 = ((invPow - 1) * x1 + a / (x1.pow(invPow - 1))) / invPow;
	        }
	        return x1;
	    }
        public static bool arecoprime(int a, int b)
        {
            if (a == 1 || b == 1)
                return true;
            if (a == b)
                return false;
            if (a.isprimebylist() == true || b.isprimebylist() == true)
                return true;
            minmax(ref a, ref b);
            return a.primefactors().All(x => b % x != 0);
        }
	    public static IEnumerable<int> Collatz(int @base)
	    {
            if (@base <= 0)
                throw new ArgumentException("can't Collatz a non-positive", nameof(@base));
	        while (true)
	        {
	            yield return @base;
                if (@base == 1)
                    yield break;
	            if (@base % 2 == 0)
	                @base /= 2;
	            else
	                @base = @base * 3 + 1;
	        }
	    }
	    /// <summary>
	    /// returns how many primes are needed to produce the number
	    /// </summary>
	    public static int primality(this int a)
	    {
	        if (a == 0)
	            throw new ArgumentException("cannot be zero", nameof(a));
	        sbyte[] val =
	        {
	            -1, 0, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 3, 1, 2, 2, 4, 1, 3, 1, 3, 2, 2, 1, 4, 2, 2, 3, 3, 1, 3, 1, 5, 2, 2, 2, 4, 1, 2, 2, 4, 1, 3, 1,
	            3, 3, 2, 1, 5, 2, 3, 2, 3, 1, 4, 2, 4, 2, 2, 1, 4, 1, 2, 3, 6, 2, 3, 1, 3, 2, 3, 1, 5, 1, 2, 3, 3, 2, 3, 1, 5, 4, 2, 1, 4, 2, 2, 2, 4,
	            1, 4, 2, 3, 2, 2, 2, 6, 1, 3, 3, 4, 1, 3, 1, 4, 3, 2, 1, 5, 1, 3, 2, 5, 1, 3, 2, 3, 3, 2, 2, 5, 2, 2, 2, 3, 3, 4, 1, 7, 2, 3, 1, 4, 2,
	            2, 4, 4, 1, 3, 1, 4, 2, 2, 2, 6, 2, 2, 3, 3, 1, 4, 1, 4, 3, 3, 2, 4, 1, 2, 2, 6, 2, 5, 1, 3, 3, 2, 1, 5, 2, 3, 3, 3, 1, 3, 3, 5, 2, 2,
	            1, 5, 1, 3, 2, 4, 2, 3, 2, 3, 4, 3, 1, 7, 1, 2, 3, 4, 1, 4, 1, 5, 2, 2, 2, 4, 2, 2, 3, 5, 2, 4, 1, 3, 2, 2, 2, 6, 2, 2, 2, 4, 2, 3, 1,
	            6, 4, 2, 1, 4, 1, 3, 3, 4, 1, 4, 2, 3, 2, 3, 1, 6, 1, 3, 5, 3, 3, 3, 2, 4, 2, 4, 1, 5, 2, 2, 3, 8, 1, 3, 2, 4, 3, 2, 1, 5, 2, 3, 2, 3,
	            1, 5, 1, 5, 3, 2, 3, 4, 1, 2, 3, 5, 1, 3, 1, 3, 3, 3, 2, 7, 2, 3, 2, 3, 1, 4, 2, 4, 4, 2, 2, 5, 2, 2, 2, 5, 2, 4, 1, 4, 2, 3, 1, 5, 1,
	            2, 4, 3, 1, 3, 2, 7, 2, 3, 2, 6, 3, 2, 2, 4, 2, 4, 1, 3, 3, 2, 2, 6, 1, 3, 2, 4, 2, 4, 3, 4, 3, 2, 1, 4, 1, 4, 4, 6, 1, 3, 2, 3, 3, 2,
	            1, 6, 2, 2, 3, 4, 2, 3, 1, 5, 3, 3, 2, 4, 1, 3, 4, 4, 2, 5, 1, 4, 2, 2, 1, 8, 3, 2, 3, 3, 1, 4, 2, 5, 2, 2, 2, 5, 1, 2, 3, 6, 1, 3, 2,
	            3, 5, 3, 2, 5, 1, 3, 2, 3, 2, 4, 2, 6, 2, 3, 1, 5, 1, 2, 3, 4, 3, 3, 2, 3, 3, 3, 1, 7, 1, 3, 3, 3, 2, 3, 1, 5, 4, 3, 1, 4, 2, 2, 2, 7,
	            1, 5, 2, 3, 2, 2, 3, 5, 1, 2, 4, 4, 1, 4, 1, 5, 3, 2, 1, 5, 2, 3, 2, 4, 2, 3, 3, 4, 3, 2, 1, 7, 2, 2, 3, 4, 2, 6, 1, 4, 2, 4, 1, 4, 2,
	            3, 4, 5, 2, 3, 1, 5, 2, 2, 1, 6, 2, 3, 3, 3, 1, 4, 2, 9, 4, 2, 2, 4, 2, 3, 2, 5, 1, 4, 1, 3, 4, 2, 2, 6, 2, 3, 3, 4, 2, 3, 2, 4, 2, 2,
	            3, 6, 1, 2, 2, 6, 2, 4, 1, 3, 3, 4, 2, 5, 2, 2, 3, 3, 1, 4, 2, 6, 3, 2, 1, 4, 2, 2, 5, 4, 1, 4, 1, 4, 2, 3, 3, 8, 1, 3, 2, 4, 2, 3, 2,
	            4, 4, 2, 1, 5, 2, 3, 2, 5, 1, 5, 3, 3, 2, 3, 1, 6, 1, 3, 3, 3, 3, 3, 1, 6, 3, 3, 2, 5, 1, 2, 3, 5, 1, 3, 1, 4, 4, 2, 2, 6, 4, 2, 3, 3,
	            2, 5, 1, 4, 2, 2, 2, 4, 3, 3, 3, 8, 1, 3, 1, 4, 3, 3, 1, 7, 2, 4, 3, 3, 1, 3, 2, 5, 3, 3, 1, 5, 1, 2, 3, 4, 3, 4, 2, 3, 2, 3, 2, 7, 1,
	            2, 5, 4, 1, 3, 2, 5, 2, 3, 1, 5, 2, 4, 2, 5, 2, 4, 1, 3, 4, 2, 2, 5, 2, 2, 2, 5, 1, 5, 2, 7, 3, 2, 2, 4, 1, 3, 3, 4, 2, 4, 3, 3, 2, 2,
	            1, 7, 2, 3, 2, 3, 3, 4, 1, 5, 6, 3, 2, 4, 1, 2, 4, 6, 2, 4, 1, 4, 3, 3, 1, 5, 2, 2, 3, 4, 2, 5, 1, 5, 2, 3, 2, 6, 1, 2, 3, 5, 1, 3, 2,
	            3, 4, 2, 2, 9, 1, 4, 2, 3, 1, 4, 3, 4, 3, 2, 2, 5, 2, 3, 4, 6, 2, 3, 1, 3, 2, 3, 2, 6, 2, 2, 3, 3, 1, 4, 2, 7, 3, 2, 2, 4, 3, 3, 2, 4,
	            1, 6, 1, 4, 2, 3, 2, 6, 2, 2, 4, 4, 1, 3, 1, 4, 4, 3, 1, 5, 1, 3, 2, 7, 3, 3, 2, 4, 4, 2, 1, 6, 2, 2, 2, 3, 3, 4, 3, 5, 2, 4, 2, 4, 1,
	            3, 4, 4, 1, 4, 1, 4, 3, 2, 1, 8, 2, 2, 3, 4, 2, 4, 2, 4, 3, 3, 4, 4, 1, 2, 2, 6, 1, 5, 1, 4, 3, 2, 1, 5, 2, 3, 5, 3, 2, 3, 2, 8, 3, 2,
	            2, 6, 2, 3, 3, 4, 2, 3, 1, 3, 3, 4, 1, 6, 2, 2, 3, 3, 2, 5, 1, 5, 2, 2, 2, 5, 3, 2, 3, 6, 1, 4, 3, 3, 2, 2, 3, 6, 1, 3, 2, 4, 1, 3, 2,
	            5, 5, 3, 1, 4, 2, 4, 2, 5, 1, 4, 2, 3, 3, 2, 2, 8, 2, 3, 3, 3, 2, 4, 1, 5, 3, 3, 1, 7, 2, 2, 4, 5, 1, 3, 2, 5, 3, 2, 1, 5, 2, 3, 3, 4,
	            2, 5, 1, 6, 2, 3, 2, 4, 1, 2, 4
	        };
	        if (a < 0)
	        {
	            a = -a;
	        }
	        return a < val.Length ? val[a] : a.primefactors().Count();
	    }
	    public static double abundancy(this int a)
		{
			return a.factors().Sum() / (double)a;
		}
		public static int totient(this int a)
		{
		    int[] vals = {
		        -1, 1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30, 16,
		        20, 16, 24, 12, 36, 18, 24, 16, 40, 12, 42, 20, 24, 22, 46, 16, 42, 20, 32, 24, 52, 18, 40, 24, 36, 28, 58, 16,
		        60, 30, 36, 32, 48, 20, 66, 32, 44, 24, 70, 24, 72, 36, 40, 36, 60, 24, 78, 32, 54, 40, 82, 24, 64, 42, 56, 40,
		        88, 24, 72, 44, 60, 46, 72, 32, 96, 42, 60, 40, 100, 32, 102, 48, 48, 52, 106, 36, 108, 40, 72, 48, 112, 36,
		        88, 56, 72, 58, 96, 32, 110, 60, 80, 60, 100, 36, 126, 64, 84, 48, 130, 40, 108, 66, 72, 64, 136, 44, 138, 48,
		        92, 70, 120, 48, 112, 72, 84, 72, 148, 40, 150, 72, 96, 60, 120, 48, 156, 78, 104, 64, 132, 54, 162, 80, 80,
		        82, 166, 48, 156, 64, 108, 84, 172, 56, 120, 80, 116, 88, 178, 48, 180, 72, 120, 88, 144, 60, 160, 92, 108, 72,
		        190, 64, 192, 96, 96, 84, 196, 60, 198, 80, 132, 100, 168, 64, 160, 102, 132, 96, 180, 48, 210, 104, 140, 106,
		        168, 72, 180, 108, 144, 80, 192, 72, 222, 96, 120, 112, 226, 72, 228, 88, 120, 112, 232, 72, 184, 116, 156, 96,
		        238, 64, 240, 110, 162, 120, 168, 80, 216, 120, 164, 100, 250, 72, 220, 126, 128, 128, 256, 84, 216, 96, 168,
		        130, 262, 80, 208, 108, 176, 132, 268, 72, 270, 128, 144, 136, 200, 88, 276, 138, 180, 96, 280, 92, 282, 140,
		        144, 120, 240, 96, 272, 112, 192, 144, 292, 84, 232, 144, 180, 148, 264, 80, 252, 150, 200, 144, 240, 96, 306,
		        120, 204, 120, 310, 96, 312, 156, 144, 156, 316, 104, 280, 128, 212, 132, 288, 108, 240, 162, 216, 160, 276,
		        80, 330, 164, 216, 166, 264, 96, 336, 156, 224, 128, 300, 108, 294, 168, 176, 172, 346, 112, 348, 120, 216,
		        160, 352, 116, 280, 176, 192, 178, 358, 96, 342, 180, 220, 144, 288, 120, 366, 176, 240, 144, 312, 120, 372,
		        160, 200, 184, 336, 108, 378, 144, 252, 190, 382, 128, 240, 192, 252, 192, 388, 96, 352, 168, 260, 196, 312,
		        120, 396, 198, 216, 160, 400, 132, 360, 200, 216, 168, 360, 128, 408, 160, 272, 204, 348, 132, 328, 192, 276,
		        180, 418, 96, 420, 210, 276, 208, 320, 140, 360, 212, 240, 168, 430, 144, 432, 180, 224, 216, 396, 144, 438,
		        160, 252, 192, 442, 144, 352, 222, 296, 192, 448, 120, 400, 224, 300, 226, 288, 144, 456, 228, 288, 176, 460,
		        120, 462, 224, 240, 232, 466, 144, 396, 184, 312, 232, 420, 156, 360, 192, 312, 238, 478, 128, 432, 240, 264,
		        220, 384, 162, 486, 240, 324, 168, 490, 160, 448, 216, 240, 240, 420, 164, 498, 200, 332, 250, 502, 144, 400,
		        220, 312, 252, 508, 128, 432, 256, 324, 256, 408, 168, 460, 216, 344, 192, 520, 168, 522, 260, 240, 262, 480,
		        160, 506, 208, 348, 216, 480, 176, 424, 264, 356, 268, 420, 144, 540, 270, 360, 256, 432, 144, 546, 272, 360,
		        200, 504, 176, 468, 276, 288, 276, 556, 180, 504, 192, 320, 280, 562, 184, 448, 282, 324, 280, 568, 144, 570,
		        240, 380, 240, 440, 192, 576, 272, 384, 224, 492, 192, 520, 288, 288, 292, 586, 168, 540, 232, 392, 288, 592,
		        180, 384, 296, 396, 264, 598, 160, 600, 252, 396, 300, 440, 200, 606, 288, 336, 240, 552, 192, 612, 306, 320,
		        240, 616, 204, 618, 240, 396, 310, 528, 192, 500, 312, 360, 312, 576, 144, 630, 312, 420, 316, 504, 208, 504,
		        280, 420, 256, 640, 212, 642, 264, 336, 288, 646, 216, 580, 240, 360, 324, 652, 216, 520, 320, 432, 276, 658,
		        160, 660, 330, 384, 328, 432, 216, 616, 332, 444, 264, 600, 192, 672, 336, 360, 312, 676, 224, 576, 256, 452,
		        300, 682, 216, 544, 294, 456, 336, 624, 176, 690, 344, 360, 346, 552, 224, 640, 348, 464, 240, 700, 216, 648,
		        320, 368, 352, 600, 232, 708, 280, 468, 352, 660, 192, 480, 356, 476, 358, 718, 192, 612, 342, 480, 360, 560,
		        220, 726, 288, 486, 288, 672, 240, 732, 366, 336, 352, 660, 240, 738, 288, 432, 312, 742, 240, 592, 372, 492,
		        320, 636, 200, 750, 368, 500, 336, 600, 216, 756, 378, 440, 288, 760, 252, 648, 380, 384, 382, 696, 256, 768,
		        240, 512, 384, 772, 252, 600, 384, 432, 388, 720, 192, 700, 352, 504, 336, 624, 260, 786, 392, 524, 312, 672,
		        240, 720, 396, 416, 396, 796, 216, 736, 320, 528, 400, 720, 264, 528, 360, 536, 400, 808, 216, 810, 336, 540,
		        360, 648, 256, 756, 408, 432, 320, 820, 272, 822, 408, 400, 348, 826, 264, 828, 328, 552, 384, 672, 276, 664,
		        360, 540, 418, 838, 192, 812, 420, 560, 420, 624, 276, 660, 416, 564, 320, 792, 280, 852, 360, 432, 424, 856,
		        240, 858, 336, 480, 430, 862, 288, 688, 432, 544, 360, 780, 224, 792, 432, 576, 396, 600, 288, 876, 438, 584,
		        320, 880, 252, 882, 384, 464, 442, 886, 288, 756, 352, 540, 444, 828, 296, 712, 384, 528, 448, 840, 240, 832,
		        400, 504, 448, 720, 300, 906, 452, 600, 288, 910, 288, 820, 456, 480, 456, 780, 288, 918, 352, 612, 460, 840,
		        240, 720, 462, 612, 448, 928, 240, 756, 464, 620, 466, 640, 288, 936, 396, 624, 368, 940, 312, 880, 464, 432,
		        420, 946, 312, 864, 360, 632, 384, 952, 312, 760, 476, 560, 478, 816, 256, 930, 432, 636, 480, 768, 264, 966,
		        440, 576, 384, 970, 324, 828, 486, 480, 480, 976, 324, 880, 336, 648, 490, 982, 320, 784, 448, 552, 432, 924,
		        240, 990, 480, 660, 420, 792, 328, 996, 498, 648, 400, 720, 332, 928, 500, 528, 502, 936, 288, 1008, 400, 672,
		        440, 1012, 312, 672, 504, 672, 508, 1018, 256, 1020, 432, 600, 512, 800, 324, 936, 512, 588, 408, 1030, 336,
		        1032, 460, 528, 432, 960, 344, 1038, 384, 692, 520, 888, 336, 720, 522, 696, 520, 1048, 240, 1050, 524, 648,
		        480, 840, 320, 900, 506, 704, 416, 1060, 348, 1062, 432, 560, 480, 960, 352, 1068, 424, 576, 528, 1008, 356,
		        840, 536, 716, 420, 984, 288, 1012, 540, 684, 540, 720, 360, 1086, 512, 660, 432, 1090, 288, 1092, 546, 576,
		        544, 1096, 360, 936, 400, 732, 504, 1102, 352, 768, 468, 720, 552, 1108, 288, 1000, 552, 624, 556, 888, 360,
		        1116, 504, 744, 384, 1044, 320, 1122, 560, 600, 562, 924, 368, 1128, 448, 672, 564, 1020, 324, 904, 560, 756,
		        568, 1056, 288, 972, 570, 756, 480, 912, 380, 1080, 480, 764, 440, 1150, 384, 1152, 576, 480, 544, 1056, 384,
		        1080, 448, 756, 492, 1162, 384, 928, 520, 776, 576, 996, 288, 1170, 584, 704, 586, 920, 336, 1060, 540, 780,
		        464, 1180, 392, 936, 576, 624, 592, 1186, 360, 1120, 384, 792, 592, 1192, 396, 952, 528, 648, 598, 1080, 320,
		        1200, 600, 800, 504, 960, 396, 1120, 600, 720, 440, 1032, 400, 1212, 606, 648, 576, 1216, 336, 1144, 480, 720,
		        552, 1222, 384, 840, 612, 816, 612, 1228, 320, 1230, 480, 816, 616, 864, 408, 1236, 618, 696, 480, 1152, 396,
		        1120, 620, 656, 528, 1176, 384, 1248, 500, 828, 624, 1068, 360, 1000, 624, 836, 576, 1258, 288, 1152, 630, 840,
		        624, 880, 420, 1080, 632, 828, 504, 1200, 416, 1188, 504, 640, 560, 1276, 420, 1278, 512, 720, 640, 1282, 424,
		        1024, 642, 720, 528, 1288, 336, 1290, 576, 860, 646, 864, 432, 1296, 580, 864, 480, 1300, 360, 1302, 648, 672,
		        652, 1306, 432, 960, 520, 792, 640, 1200, 432, 1048, 552, 876, 658, 1318, 320, 1320, 660, 756, 660, 1040, 384,
		        1326, 656, 884, 432, 1210, 432, 1260, 616, 704, 664, 1140, 444, 1224, 528, 888, 600, 1248, 384, 1072, 672, 896,
		        672, 1260, 360, 1152, 624, 800, 676, 1080, 448, 1276, 576, 900, 512, 1360, 452, 1288, 600, 576, 682, 1366, 432,
		        1332, 544, 912, 588, 1372, 456, 1000, 672, 864, 624, 1176, 352, 1380, 690, 920, 688, 1104, 360, 1296, 692, 924,
		        552, 1272, 448, 1188, 640, 720, 696, 1260, 464, 1398, 480, 932, 700, 1320, 432, 1120, 648, 792, 640, 1408, 368,
		        1312, 704, 936, 600, 1128, 464, 1296, 708, 840, 560, 1176, 468, 1422, 704, 720, 660, 1426, 384, 1428, 480, 936,
		        712, 1432, 476, 960, 716, 956, 718, 1438, 384, 1300, 612, 864, 684, 1088, 480, 1446, 720, 792, 560, 1450, 440,
		        1452, 726, 768, 576, 1380, 486, 1458, 576, 972, 672, 1080, 480, 1168, 732, 972, 732, 1344, 336, 1470, 704, 980,
		        660, 1160, 480, 1260, 738, 896, 576, 1480, 432, 1482, 624, 720, 742, 1486, 480, 1488, 592, 840, 744, 1492, 492,
		        1056, 640, 996, 636, 1498, 400, 1404, 750, 996, 736, 1008, 500, 1360, 672, 1004, 600, 1510, 432, 1408, 756,
		        800, 756, 1440, 440, 1260, 576, 936, 760, 1522, 504, 1200, 648, 1016, 760, 1380, 384, 1530, 764, 864, 696,
		        1224, 512, 1456, 768, 972, 480, 1452, 512, 1542, 768, 816, 772, 1152, 504, 1548, 600, 920, 768, 1552, 432,
		        1240, 776, 1032, 720, 1558, 384, 1332, 700, 1040, 704, 1248, 504, 1566, 672, 1044, 624, 1570, 520, 1320, 786,
		        720, 784, 1476, 524, 1578, 624, 960, 672, 1582, 480, 1264, 720, 1012, 792, 1356, 416, 1512, 792, 1044, 796,
		        1120, 432, 1596, 736, 960, 640, 1600, 528, 1368, 800, 848, 720, 1606, 528, 1608, 528, 1068, 720, 1612, 536,
		        1152, 800, 840, 808, 1618, 432, 1620, 810, 1080, 672, 1200, 540, 1626, 720, 1080, 648, 1392, 512, 1540, 756,
		        864, 816, 1636, 432, 1480, 640, 1092, 820, 1560, 544, 1104, 822, 1080, 816, 1536, 400, 1512, 696, 1008, 826,
		        1320, 528, 1656, 828, 936, 656, 1500, 552, 1662, 768, 864, 672, 1666, 552, 1668, 664, 1112, 720, 1428, 540,
		        1320, 836, 1008, 838, 1584, 384, 1640, 812, 960, 840, 1344, 560, 1440, 840, 1124, 624, 1584, 552, 1692, 660,
		        896, 832, 1696, 564, 1698, 640, 972, 792, 1560, 560, 1200, 852, 1136, 720, 1708, 432, 1624, 848, 1140, 856,
		        1176, 480, 1600, 858, 1140, 672, 1720, 480, 1722, 860, 880, 862, 1560, 576, 1296, 688, 1152, 864, 1732, 544,
		        1384, 720, 1152, 780, 1656, 448, 1740, 792, 984, 864, 1392, 576, 1746, 792, 1040, 600, 1632, 576, 1752, 876,
		        864, 876, 1500, 584, 1758, 640, 1172, 880, 1680, 504, 1408, 882, 1080, 768, 1680, 464, 1320, 884, 1176, 886,
		        1400, 576, 1776, 756, 1184, 704, 1632, 540, 1782, 888, 768, 828, 1786, 592, 1788, 712, 1188, 768, 1620, 528,
		        1432, 896, 1196, 840, 1536, 480, 1800, 832, 1200, 800, 1368, 504, 1656, 896, 1188, 720, 1810, 600, 1512, 906,
		        880, 904, 1716, 600, 1696, 576, 1212, 910, 1822, 576, 1440, 820, 1008, 912, 1740, 480, 1830, 912, 1104, 780,
		        1464, 576, 1660, 918, 1224, 704, 1572, 612, 1728, 920, 960, 840, 1846, 480, 1806, 720, 1232, 924, 1728, 612,
		        1248, 896, 1236, 928, 1560, 480, 1860, 756, 1188, 928, 1488, 620, 1866, 932, 1056, 640, 1870, 576, 1872, 936,
		        1000, 792, 1876, 624, 1878, 736, 1080, 940, 1608, 624, 1344, 880, 1152, 928, 1888, 432, 1800, 840, 1260, 946,
		        1512, 624, 1620, 864, 1260, 720, 1900, 632, 1720, 768, 1008, 952, 1906, 624, 1804, 760, 1008, 952, 1912, 560,
		        1528, 956, 1260, 816, 1800, 512, 1792, 930, 1280, 864, 1200, 636, 1840, 960, 1284, 768, 1930, 528, 1932, 966,
		        1008, 880, 1776, 576, 1656, 768, 1292, 970, 1848, 648, 1552, 828, 1160, 972, 1948, 480, 1950, 960, 1080, 976,
		        1408, 648, 1836, 880, 1304, 672, 1872, 648, 1800, 980, 1040, 982, 1680, 640, 1780, 784, 1296, 896, 1972, 552,
		        1560, 864, 1316, 924, 1978, 480, 1692, 990, 1320, 960, 1584, 660, 1986, 840, 1152, 792, 1800, 656, 1992, 996,
		        864, 996, 1996, 648, 1998, 800, 1232, 720, 2002, 664, 1600, 928, 1332, 1000, 1680, 528, 2010, 1004, 1200, 936,
		        1440, 576, 2016, 1008, 1344, 800, 1932, 672, 1632, 880, 1080, 1012, 2026, 624, 2028, 672, 1352, 1008, 1908,
		        672, 1440, 1016, 1152, 1018, 2038, 512, 1872, 1020, 1356, 864, 1632, 600, 1936, 1024, 1364, 800, 1752, 648,
		        2052, 936, 1088, 1024, 1760, 588, 1960, 816, 1368, 1030, 2062, 672, 1392, 1032, 1248, 920, 2068, 528, 1944,
		        864, 1380, 960, 1640, 688, 1980, 1038, 1080, 768, 2080, 692, 2082, 1040, 1104, 888, 2086, 672, 2088, 720, 1280,
		        1044, 1584, 696, 1672, 1040, 1392, 1048, 2098, 480, 1900, 1050, 1400, 1048, 1680, 648, 1764, 960, 1296, 840,
		        2110, 640, 2112, 900, 1104, 1012, 2016, 704, 1944, 832, 1200, 1060, 1920, 696, 1600, 1062, 1416, 864, 2128,
		        560, 2130, 960, 1404, 960, 1440, 704, 2136, 1068, 1320, 848, 2140, 576, 2142, 1056, 960, 1008, 2016, 712, 1836,
		        840, 1428, 1072, 2152, 716, 1720, 840, 1436, 984, 2016, 576, 2160, 1012, 1224, 1080, 1728, 684, 1960, 1080,
		        1440, 720, 1992, 720, 2080, 1086, 1120, 1024, 1860, 660, 2178, 864, 1452, 1090, 2088, 576, 1584, 1092, 1458,
		        1092, 1980, 576, 1872, 1088, 1344, 1096, 1752, 720, 2028, 936, 1464, 800, 2100, 732, 2202, 1008, 1008, 1102,
		        2206, 704, 2162, 768, 1320, 936, 2212, 720, 1768, 1104, 1476, 1108, 1896, 576, 2220, 1000, 1296, 1104, 1760,
		        624, 2080, 1112, 1484, 888, 2112, 720, 1680, 1116, 1184, 1008, 2236, 744, 2238, 768, 1476, 1044, 2242, 640,
		        1792, 1122, 1272, 1120, 2064, 600, 2250, 1124, 1500, 924, 1600, 736, 2160, 1128, 1500, 896, 1728, 672, 2160,
		        1128, 1200, 1020, 2266, 648, 2268, 904, 1512, 1120, 2272, 756, 1440, 1136, 1320, 1056, 2184, 576, 2280, 972,
		        1520, 1140, 1824, 756, 2286, 960, 1296, 912, 2184, 760, 2292, 1080, 1152, 960, 2296, 764, 1980, 880, 1392,
		        1150, 1932, 768, 1840, 1152, 1536, 1152, 2308, 480, 2310, 1088, 1536, 1056, 1848, 768, 1980, 1080, 1544, 896,
		        2100, 756, 2200, 984, 1200, 1162, 2136, 768, 2176, 928, 1296, 1040, 2332, 776, 1864, 1152, 1440, 996, 2338,
		        576, 2340, 1170, 1400, 1168, 1584, 704, 2346, 1172, 1512, 920, 2350, 672, 2160, 1060, 1248, 1080, 2356, 780,
		        2016, 928, 1572, 1180, 2208, 784, 1680, 936, 1572, 1152, 2244, 624, 2370, 1184, 1344, 1186, 1800, 720, 2376,
		        1120, 1440, 768, 2380, 792, 2382, 1184, 1248, 1192, 1800, 792, 2388, 952, 1592, 1056, 2392, 648, 1912, 1196,
		        1472, 1080, 2398, 640, 2058, 1200, 1584, 1200, 1728, 800, 2296, 1008, 1440, 960, 2410, 792, 2268, 1120, 1056,
		        1200, 2416, 720, 2320, 880, 1608, 1032, 2422, 800, 1920, 1212, 1616, 1212, 2076, 648, 1920, 1152, 1620, 1216,
		        1944, 672, 2436, 1144, 1620, 960, 2440, 720, 2088, 1104, 1296, 1222, 2446, 768, 2340, 840, 1512, 1224, 2220,
		        816, 1960, 1224, 1296, 1228, 2458, 640, 2332, 1230, 1640, 960, 1792, 816, 2466, 1232, 1644, 864, 2112, 816,
		        2472, 1236, 1200, 1236, 2476, 696, 2376, 960, 1652, 1152, 2280, 792, 1680, 1120, 1656, 1240, 2340, 656, 2392,
		        1056, 1656, 1176, 1992, 768, 2260, 1248, 1344, 1000, 2400, 828, 2502, 1248, 1328, 1068, 2376, 720, 2304, 1000,
		        1620, 1248, 2148, 836, 2008, 1152, 1676, 1258, 2280, 576, 2520, 1152, 1624, 1260, 2000, 840, 2052, 1248, 1680,
		        880, 2530, 840, 2368, 1080, 1248, 1264, 2436, 828, 2538, 1008, 1320, 1200, 2542, 832, 2032, 1188, 1692, 1008,
		        2548, 640, 2550, 1120, 1584, 1276, 1728, 840, 2556, 1278, 1704, 1024, 2352, 720, 2320, 1280, 1296, 1282, 2400,
		        848, 2196, 1024, 1712, 1284, 2460, 720, 2040, 1056, 1716, 1288, 2578, 672, 2464, 1290, 1440, 1152, 1840, 860,
		        2376, 1292, 1724, 864, 2590, 864, 2592, 1296, 1376, 1160, 2184, 864, 2464, 960, 1632, 1300, 2448, 720, 2080,
		        1302, 1560, 1296, 2608, 672, 2232, 1304, 1584, 1306, 2088, 864, 2616, 960, 1728, 1040, 2620, 792, 2520, 1280,
		        1200, 1200, 2520, 864, 2380, 1048, 1752, 1104, 2632, 876, 1920, 1316, 1752, 1318, 2016, 640, 2484, 1320, 1760,
		        1320, 2024, 756, 2646, 1320, 1764, 1040, 2400, 768, 2268, 1326, 1392, 1312, 2656, 884, 2658, 864, 1772, 1210,
		        2662, 864, 1920, 1260, 1512, 1232, 2496, 704, 2670, 1328, 1620, 1140, 2120, 888, 2676, 1224, 1656, 1056, 2292,
		        888, 2682, 1200, 1424, 1248, 2686, 768, 2688, 1072, 1584, 1344, 2692, 896, 1680, 1344, 1680, 1260, 2698, 720,
		        2592, 1152, 1664, 1248, 2160, 800, 2706, 1352, 1512, 1080, 2710, 896, 2712, 1276, 1440, 1152, 2160, 900, 2718,
		        1024, 1812, 1360, 2328, 904, 2160, 1288, 1800, 1200, 2728, 576, 2730, 1364, 1820, 1366, 2184, 864, 2112, 1332,
		        1640, 1088, 2740, 912, 2520, 1176, 1440, 1372, 2640, 912, 2748, 1000, 1560, 1344, 2752, 864, 2016, 1248, 1836,
		        1176, 2640, 704, 2500, 1380, 1836, 1380, 1872, 920, 2766, 1376, 1680, 1104, 2592, 720, 2668, 1296, 1440, 1384,
		        2776, 924, 2376, 1104, 1836, 1272, 2420, 896, 2224, 1188, 1856, 1280, 2788, 720, 2790, 1392, 1512, 1260, 2016,
		        928, 2796, 1398, 1860, 960, 2800, 932, 2802, 1400, 1280, 1320, 2400, 864, 2756, 1120, 1872, 1296, 2688, 792,
		        2248, 1280, 1872, 1408, 2818, 736, 2160, 1312, 1880, 1408, 2240, 936, 2560, 1200, 1760, 1128, 2664, 928, 2832,
		        1296, 1296, 1416, 2836, 840, 2656, 1120, 1892, 1176, 2842, 936, 2272, 1422, 1728, 1408, 2160, 720, 2850, 1320,
		        1896, 1426, 2280, 768, 2856, 1428, 1904, 960, 2860, 936, 2448, 1424, 1520, 1432, 2760, 952, 2700, 960, 1680,
		        1432, 2496, 956, 2200, 1436, 1632, 1438, 2878, 768, 2772, 1300, 1860, 1224, 2304, 864, 2886, 1368, 1908, 1088,
		        2436, 960, 2620, 1446, 1536, 1440, 2896, 792, 2664, 1120, 1932, 1450, 2902, 880, 1968, 1452, 1728, 1452, 2908,
		        768, 2800, 1152, 1940, 1380, 2080, 972, 2916, 1458, 1656, 1152, 2772, 972, 2808, 1344, 1440, 1080, 2926, 960,
		        2800, 1168, 1952, 1464, 2508, 972, 2344, 1464, 1760, 1344, 2938, 672, 2752, 1470, 1944, 1408, 2160, 980, 2520,
		        1320, 1964, 1160, 2712, 960, 2952, 1260, 1568, 1476, 2956, 896, 2680, 1152, 1656, 1480, 2962, 864, 2368, 1482,
		        1848, 1248, 2968, 720, 2970, 1484, 1980, 1486, 1920, 960, 2736, 1488, 1980, 1184, 2700, 840, 2808, 1488, 1584,
		        1492, 2856, 984, 2520, 1056, 1992, 1280, 2880, 996, 2392, 1272, 1944, 1498, 2998, 800, 3000, 1404, 1440, 1500,
		        2400, 996, 2880, 1472, 1856, 1008, 3010, 1000, 2860, 1360, 1584, 1344, 2580, 1004, 3018, 1200, 1872, 1510,
		        3022, 864, 2200, 1408, 2016, 1512, 2784, 800, 2592, 1512, 2016, 1440, 2424, 880, 3036, 1260, 2024, 1152, 3040,
		        936, 2848, 1520, 1344, 1522, 2760, 1008, 3048, 1200, 2016, 1296, 2940, 1016, 2208, 1520, 2036, 1380, 2376, 768,
		        3060, 1530, 2040, 1528, 2448, 864, 3066, 1392, 1800, 1224, 2952, 1024, 2628, 1456, 1600, 1536, 2880, 972, 3078,
		        960, 1872, 1452, 3082, 1024, 2464, 1542, 1764, 1536, 3088, 816, 2800, 1544, 2060, 1152, 2472, 1008, 2916, 1548,
		        2064, 1200, 2652, 920, 2968, 1536, 1584, 1552, 2856, 864, 3108, 1240, 1920, 1552, 2820, 1032, 2112, 1440, 2076,
		        1558, 3118, 768, 3120, 1332, 2076, 1400, 2500, 1040, 3016, 1408, 1776, 1248, 3000, 1008, 2880, 1566, 1440,
		        1344, 3136, 1044, 3024, 1248, 2088, 1570, 2688, 1040, 2304, 1320, 2096, 1572, 3036, 720, 2992, 1568, 2100,
		        1476, 2520, 1048, 2400, 1578, 1944, 1248, 3024, 960, 3162, 1344, 1680, 1582, 3166, 960, 3168, 1264, 1800, 1440,
		        2988, 1012, 2520, 1584, 2112, 1356, 2720, 832, 3180, 1512, 2120, 1584, 2016, 1044, 3186, 1592, 2124, 1120,
		        3190, 864, 3060, 1596, 1680, 1472, 3036, 960, 2736, 1280, 1920, 1600, 3202, 1056, 2560, 1368, 2136, 1600, 3208,
		        848, 2808, 1440, 1728, 1606, 2568, 1056, 3216, 1608, 2016, 1056, 3220, 1068, 2920, 1440, 1680, 1612, 2760,
		        1072, 3228, 1152, 2148, 1600, 3120, 840, 2584, 1616, 1968, 1618, 3120, 864, 2772, 1620, 2024, 1620, 2320, 1080,
		        3040, 1344, 2052, 1200, 3250, 1080, 3252, 1626, 1440, 1440, 3256, 1080, 3258, 1296, 2172, 1392, 3000, 1024,
		        2608, 1540, 1980, 1512, 2796, 864, 3270, 1632, 2180, 1636, 2600, 864, 3136, 1480, 2184, 1280, 3072, 1092, 2772,
		        1640, 1728, 1560, 3096, 1088, 2640, 1104, 2192, 1644, 3168, 1080, 2632, 1632, 1872, 1536, 3298, 800, 3300,
		        1512, 2196, 1392, 2640, 1008, 3306, 1652, 2204, 1320, 2520, 1056, 3312, 1656, 1536, 1656, 3180, 936, 3318,
		        1312, 2160, 1500, 3322, 1104, 2160, 1662, 2216, 1536, 3328, 864, 3330, 1344, 2000, 1666, 2464, 1104, 3220,
		        1668, 1872, 1328, 3072, 1112, 3342, 1440, 1776, 1428, 3346, 1080, 3136, 1320, 2232, 1672, 2868, 1008, 2400,
		        1676, 2232, 1584, 3358, 768, 3360, 1640, 2088, 1624, 2688, 960, 2592, 1680, 2244, 1344, 3370, 1120, 3372, 1440,
		        1800, 1680, 3060, 1124, 3240, 1248, 1848, 1584, 3168, 1104, 2704, 1692, 2256, 1320, 3388, 896, 3390, 1664,
		        2016, 1696, 2304, 1128, 3276, 1698, 2040, 1280, 3204, 972, 3280, 1584, 1808, 1560, 3406, 1120, 2916, 1200,
		        2268, 1704, 3412, 1136, 2728, 1440, 2112, 1708, 3144, 864, 3100, 1624, 1944, 1696, 2720, 1140, 3256, 1712,
		        2268, 1176, 3312, 960, 3432, 1600, 1824, 1716, 2940, 1140, 3240, 1344, 2160, 1720, 3120, 960, 2496, 1722, 2292,
		        1720, 3448, 880, 2688, 1724, 2300, 1560, 2760, 1152, 3456, 1296, 2304, 1376, 3460, 1152, 3462, 1728, 1440,
		        1732, 3466, 1088, 3468, 1384, 2112, 1440, 3300, 1152, 2760, 1560, 2160, 1656, 2940, 896, 3422, 1740, 2268,
		        1584, 2560, 984, 3160, 1728, 2324, 1392, 3490, 1152, 2988, 1746, 1856, 1584, 3216, 1040, 3498, 1200, 2328,
		        1632, 3360, 1152, 2800, 1752, 1992, 1752, 3080, 864, 3510, 1752, 2340, 1500, 2592, 1168, 3516, 1758, 2112,
		        1280, 3012, 1172, 3240, 1760, 1840, 1680, 3526, 1008, 3528, 1408, 2120, 1764, 3532, 1080, 2400, 1536, 2340,
		        1680, 3538, 928, 3540, 1320, 2360, 1768, 2832, 1176, 3546, 1772, 1872, 1400, 3432, 1152, 2880, 1776, 1872,
		        1512, 3556, 1184, 3558, 1408, 2372, 1632, 3048, 1080, 2640, 1782, 2240, 1776, 3444, 768, 3570, 1656, 2376,
		        1786, 2400, 1184, 3024, 1788, 2384, 1424, 3580, 1188, 3582, 1536, 1904, 1620, 3360, 1056, 3456, 1432, 1944,
		        1792, 3592, 1196, 2872, 1680, 2160, 1536, 3480, 960, 3312, 1800, 2400, 1664, 2448, 1200, 3606, 1600, 2400,
		        1368, 3432, 1008, 3612, 1656, 1920, 1792, 3616, 1188, 2760, 1440, 2240, 1810, 3622, 1200, 2800, 1512, 2160,
		        1812, 3420, 880, 3630, 1808, 2064, 1716, 2904, 1200, 3636, 1696, 2424, 1152, 3300, 1212, 3642, 1820, 1944,
		        1822, 3120, 1152, 3520, 1440, 2432, 1640, 3360, 1008, 2688, 1824, 2288, 1740, 3658, 960, 3132, 1830, 2160,
		        1824, 2928, 1104, 3456, 1560, 2444, 1464, 3670, 1152, 3672, 1660, 1680, 1836, 3676, 1224, 3384, 1408, 2448,
		        1572, 3528, 1224, 2640, 1728, 2456, 1840, 2880, 960, 3690, 1680, 2460, 1846, 2952, 960, 3696, 1806, 2448, 1440,
		        3700, 1232, 3036, 1848, 1728, 1728, 3360, 1224, 3708, 1248, 2472, 1792, 3588, 1236, 2968, 1856, 2088, 1560,
		        3718, 960, 3660, 1860, 2304, 1512, 2960, 1188, 3726, 1856, 2240, 1488, 2880, 1240, 3732, 1866, 1968, 1864,
		        3600, 1056, 3738, 1280, 2352, 1870, 3528, 1152, 2544, 1872, 2496, 1872, 3564, 1000, 3300, 1584, 2484, 1876,
		        3000, 1248, 3264, 1878, 2136, 1472, 3760, 1080, 3640, 1880, 2000, 1608, 3766, 1248, 3768, 1344, 2508, 1760,
		        2940, 1152, 3000, 1856, 2516, 1888, 3778, 864, 3564, 1800, 2304, 1680, 3024, 1260, 3240, 1892, 2520, 1512,
		        3552, 1248, 3792, 1620, 1760, 1728, 3796, 1260, 3640, 1440, 2160, 1900, 3802, 1264, 3040, 1720, 2484, 1536,
		        3504, 1008, 3672, 1904, 2400, 1906, 2592, 1248, 3460, 1804, 2376, 1520, 3820, 1008, 3822, 1904, 1920, 1912,
		        3696, 1120, 3276, 1528, 2552, 1912, 3832, 1260, 2784, 1632, 2556, 1800, 3480, 1024, 3652, 1792, 2160, 1860,
		        3072, 1280, 3846, 1728, 2564, 1200, 3850, 1272, 3852, 1840, 2048, 1920, 3024, 1284, 3616, 1536, 2160, 1930,
		        3862, 1056, 3088, 1932, 2576, 1932, 3744, 1008, 3276, 1760, 2580, 1776, 3000, 1152, 3876, 1656, 2580, 1536,
		        3880, 1292, 3520, 1940, 1728, 1848, 3432, 1296, 3888, 1552, 2592, 1656, 3648, 1160, 2880, 1944, 2592, 1948,
		        3336, 960, 3772, 1950, 2600, 1920, 2800, 1080, 3906, 1952, 2604, 1408, 3910, 1296, 3024, 1836, 2016, 1760,
		        3916, 1304, 3918, 1344, 2612, 1872, 3922, 1296, 3120, 1800, 1920, 1960, 3928, 1040, 3930, 1964, 2376, 1680,
		        3144, 1280, 3780, 1780, 2400, 1568, 3372, 1296, 3942, 1792, 2096, 1972, 3946, 1104, 3580, 1560, 2628, 1728,
		        3828, 1316, 2688, 1848, 2636, 1978, 3816, 960, 3712, 1692, 2640, 1980, 2880, 1320, 3966, 1920, 2268, 1584,
		        3420, 1320, 3808, 1986, 2080, 1680, 3840, 1152, 3784, 1584, 2652, 1800, 3408, 1312, 3184, 1992, 2652, 1992,
		        3988, 864, 3672, 1992, 2420, 1996, 2944, 1296, 3420, 1998, 2520, 1600, 4000, 1232, 4002, 1440, 2112, 2002,
		        4006, 1328, 3780, 1600, 2280, 1856, 4012, 1332, 2880, 2000, 2448, 1680, 4018, 1056, 4020, 2010, 2664, 2008,
		        2640, 1200, 4026, 1872, 2496, 1440, 3864, 1152, 3888, 2016, 2144, 2016, 3660, 1344, 3456, 1600, 2688, 1932,
		        3720, 1344, 3232, 1632, 2520, 1760, 4048, 1080, 4050, 2024, 2304, 2026, 3240, 1248, 4056, 2028, 2400, 1344,
		        3900, 1352, 3808, 2016, 2160, 1908, 3444, 1344, 3744, 1440, 2552, 2032, 4072, 1152, 3240, 2036, 2700, 2038,
		        4078, 1024, 3120, 1872, 2720, 2040, 3024, 1356, 3960, 1728, 2576, 1632, 4090, 1200, 4092, 1936, 1728, 2048,
		        3840, 1364, 4098, 1600, 2732, 1752, 3720, 1296, 3280, 2052, 2664, 1872, 3516, 1088, 4110, 2048, 2736, 1760,
		        3288, 1176, 3916, 1960, 2744, 1632, 3792, 1368, 3240, 2060, 2000, 2062, 4126, 1344, 4128, 1392, 2592, 2064,
		        4132, 1248, 3304, 1840, 2352, 2068, 4138, 1056, 4000, 1944, 2760, 1728, 3312, 1380, 3360, 1920, 2760, 1640,
		        3552, 1376, 4152, 1980, 2208, 2076, 4156, 1080, 4158, 1536, 2592, 2080, 3960, 1384, 2688, 2082, 2772, 2080,
		        3780, 1104, 4032, 1776, 2544, 2086, 3320, 1344, 4176, 2088, 2376, 1440, 4032, 1280, 4048, 2088, 2160, 1584,
		        4056, 1392, 4060, 1672, 2520, 2080, 3588, 1392, 3352, 2096, 2796, 2098, 3456, 960, 4200, 1900, 2796, 2100,
		        3248, 1400, 3600, 2096, 2640, 1680, 4210, 1296, 3820, 1764, 2240, 1920, 4216, 1296, 4218, 1680, 2376, 2110,
		        4080, 1280, 3120, 2112, 2816, 1800, 4228, 1104, 4230, 2024, 2624, 2016, 2640, 1408, 3996, 1944, 2808, 1664,
		        4240, 1200, 4242, 2120, 2256, 1920, 4080, 1392, 3636, 1600, 2592, 2124, 4252, 1416, 3168, 1728, 2520, 2128,
		        4258, 1120, 4260, 2130, 2352, 1920, 3408, 1404, 4000, 1920, 2844, 1440, 4270, 1408, 4272, 2136, 2160, 2136,
		        3312, 1320, 3880, 1696, 2852, 2140, 4282, 1152, 3424, 2142, 2856, 2112, 4288, 960, 3672, 2016, 2808, 2016,
		        3432, 1424, 4296, 1836, 2864, 1680, 3520, 1428, 3960, 2144, 1920, 2152, 4176, 1432, 4140, 1720, 2868, 1680,
		        4068, 1436, 3448, 1968, 2876, 2016, 3696, 1152, 4144, 2160, 2600, 2024, 3440, 1224, 4326, 2160, 2592, 1728,
		        4200, 1368, 3708, 1960, 2176, 2160, 4336, 1440, 4338, 1440, 2892, 1992, 4200, 1440, 3120, 2080, 2376, 2172,
		        4348, 1120, 4104, 2048, 2900, 1860, 3168, 1320, 4356, 2178, 2904, 1728, 3696, 1452, 4362, 2180, 2304, 2088,
		        3960, 1152, 4096, 1584, 2760, 2184, 4372, 1458, 3000, 2184, 2916, 1980, 4200, 1152, 4032, 1872, 2916, 2176,
		        3504, 1344, 4240, 2192, 2160, 1752, 4390, 1440, 4180, 2028, 2336, 1872, 4396, 1464, 4264, 1600, 2916, 2100,
		        3456, 1464, 3520, 2202, 2688, 2016, 4408, 1008, 4000, 2204, 2940, 2206, 3528, 1408, 3780, 2162, 2940, 1536,
		        4420, 1320, 4422, 1872, 2320, 2212, 4176, 1440, 4284, 1768, 2520, 2208, 3600, 1476, 3544, 2216, 2688, 1896,
		        4224, 1152, 4440, 2220, 2960, 2000, 3024, 1296, 4446, 2208, 2964, 1760, 4450, 1248, 4320, 2080, 2160, 2224,
		        4456, 1484, 3528, 1776, 2972, 2112, 4462, 1440, 3312, 1680, 2976, 2232, 4320, 1184, 4192, 2016, 2520, 2236,
		        3560, 1488, 3960, 2238, 2984, 1536, 4480, 1476, 4482, 2088, 2112, 2242, 3840, 1280, 4422, 1792, 2988, 2244,
		        4492, 1272, 3360, 2240, 2996, 2064, 4080, 1200, 3852, 2250, 2808, 2248, 3328, 1500, 4506, 1848, 2988, 1600,
		        4152, 1472, 4512, 2160, 2016, 2256, 4516, 1500, 4518, 1792, 2720, 1728, 4522, 1344, 3600, 2160, 3012, 2256,
		        3876, 1200, 4312, 2040, 3020, 2266, 3624, 1296, 4176, 2268, 2816, 1808, 4284, 1512, 3480, 2240, 2400, 2272,
		        4546, 1512, 4548, 1440, 2880, 2272, 4368, 1320, 3640, 2112, 2520, 2184, 4416, 1152, 4560, 2280, 2808, 1944,
		        3280, 1520, 4566, 2280, 3044, 1824, 3912, 1512, 4288, 2286, 2400, 1920, 4356, 1296, 4320, 1824, 3048, 2184,
		        4582, 1520, 3120, 2292, 2760, 2160, 4224, 1152, 4590, 1920, 3060, 2296, 3672, 1528, 4596, 1980, 2592, 1760,
		        4452, 1392, 4602, 2300, 2448, 1932, 4320, 1536, 4180, 1840, 2912, 2304, 3948, 1536, 3360, 2304, 2916, 2308,
		        4440, 960, 4620, 2310, 2904, 2176, 3600, 1536, 3960, 2112, 3084, 1848, 4200, 1536, 4480, 1980, 2448, 2160,
		        4636, 1544, 4638, 1792, 2304, 2100, 4642, 1512, 3712, 2200, 3096, 1968, 4648, 1200, 4650, 2324, 2760, 2136,
		        3024, 1536, 4656, 2176, 3104, 1856, 4524, 1296, 4662, 2080, 2480, 2332, 4296, 1552, 3696, 1864, 3096, 2304,
		        4672, 1440, 3200, 1992, 3116, 2338, 4678, 1152, 4500, 2340, 2664, 2340, 3744, 1400, 4536, 2336, 3120, 1584,
		        4690, 1408, 4104, 2346, 2496, 2344, 3600, 1512, 4536, 1840, 3132, 2350, 4702, 1344, 3760, 2160, 3132, 2120,
		        4416, 1248, 4032, 2160, 3140, 2356, 3520, 1560, 4576, 2016, 2640, 1856, 4720, 1572, 4722, 2360, 2160, 2208,
		        4536, 1568, 4728, 1680, 2952, 1872, 4732, 1572, 3784, 2304, 3156, 2244, 4056, 1248, 4300, 2370, 2880, 2368,
		        3456, 1344, 4600, 2372, 3164, 1800, 4750, 1440, 4032, 2376, 2528, 2240, 4620, 1440, 4758, 1536, 3036, 2380,
		        4320, 1584, 3808, 2382, 2712, 2368, 4500, 1248, 4392, 2384, 3024, 1800, 3800, 1584, 4480, 2388, 3132, 1904,
		        4092, 1592, 4782, 2112, 2240, 2392, 4786, 1296, 4788, 1912, 3192, 2392, 4792, 1472, 3264, 2160, 2880, 2398,
		        4798, 1280, 4800, 2058, 3200, 2400, 3720, 1584, 3960, 2400, 2736, 1728, 4512, 1600, 4812, 2296, 2544, 2016,
		        4816, 1440, 4680, 1920, 3212, 2410, 3744, 1584, 3840, 2268, 3216, 2240, 4380, 1056, 4830, 2400, 3204, 2416,
		        3864, 1440, 4140, 2320, 3224, 1760, 4692, 1608, 4648, 2064, 2304, 2422, 4680, 1600, 4464, 1920, 2520, 2424,
		        4620, 1616, 3880, 2424, 3236, 2076, 4704, 1296, 4860, 1920, 3240, 2304, 3312, 1620, 4680, 2432, 3240, 1944,
		        4870, 1344, 4420, 2436, 2400, 2288, 4876, 1620, 3840, 1920, 3252, 2440, 4608, 1440, 3904, 2088, 3240, 2208,
		        4888, 1296, 4752, 2444, 2784, 2446, 3520, 1536, 4756, 2340, 3080, 1680, 4368, 1512, 4902, 2448, 2592, 2220,
		        4200, 1632, 4908, 1960, 3272, 2448, 4624, 1296, 3928, 2456, 2960, 2458, 4918, 1280, 3888, 2332, 3276, 2460,
		        3920, 1640, 4536, 1920, 3120, 1792, 4930, 1632, 4932, 2466, 2208, 2464, 4936, 1644, 4480, 1728, 3240, 2112,
		        4942, 1632, 3696, 2472, 3072, 2472, 4200, 1200, 4950, 2472, 3024, 2476, 3960, 1392, 4956, 2376, 3024, 1920,
		        4400, 1652, 4248, 2304, 2640, 2280, 4966, 1584, 4968, 1680, 3312, 2240, 4972, 1656, 3960, 2480, 2808, 2340,
		        4584, 1312, 4672, 2392, 3000, 2112, 3984, 1656, 4986, 2352, 3324, 1992, 3960, 1536, 4992, 2260, 2592, 2496,
		        4716, 1344, 4998, 2000
		    };
		    if (a < vals.Length)
		    {
		        if (a <= 0)
                    throw new ArithmeticException("numbers less than 1 have no totient");
		        return vals[a];
		    }
            int ret = 1;
			foreach (var factor in a.primefactors().ToOccurances())
			{
				ret *= factor.Key.pow((int)factor.Value - 1) * (factor.Key - 1);
			}
			return ret;
		}
		public static bool arefriendly(params int[] a)
		{
			return a.Select(i => i.abundancy()).AllEqual();
		}
	    public static BigInteger choose(int n, params int[] k)
	    {
	        if (k.Length == 0)
	        {
	            return 1;
	        }
	        int sum = k.Sum();
	        if (sum > n)
	        {
	            throw new ArithmeticException("cannot choose a subgroup larger than the supergroup");
	        }
	        if (sum != n)
	        {
	            k = k.Concat((n - sum).Enumerate()).ToArray();
	        }
	        BigProduct ret = new BigProduct();
	        ret.MultiplyFactorial(n);
	        foreach (int i in k)
	        {
	            ret.DivideFactorial(i);
	        }
	        return ret.toNum();
	    }
	    public static T ExponentialSmoothing<T>(T prevPrediction, T prevVal, T factor)
	    {
	        var field = Fields.getField<T>();
	        return field.add(field.multiply(factor, prevVal),
	            field.multiply(field.subtract(field.one, factor), prevPrediction));
	    }
        public static ulong ExponentialSmoothing(ulong prevPrediction, ulong prevVal, double factor)
        {
            return (ulong)(factor*prevVal) + (ulong)((1-factor)*prevPrediction);
        }
        public static long convertfrombase(IEnumerable<int> x, int originalbase)
		{
			long ret = 0;
			int p = 1;
			foreach (int t in x)
			{
				ret += t * p;
				p *= originalbase;
			}
			return ret;
		}
		public static IEnumerable<int> converttobase(int x, int tobase)
		{
			return converttobase((long)x, tobase);
		}
		public static IEnumerable<int> converttobase(long x, int tobase)
		{
		    while (x > 0)
		    {
		        yield return (int)(x % tobase);
		        x /= tobase;
		    }
		}
		public static int decimalplaces(this double a, int newbase = 10)
		{
			double s = a % 1;
			int ret = 0;
			while (s != 0)
			{
				s = (s * newbase) % 1;
				ret++;
			}
			return ret;
		}
		public static IEnumerable<int> factors(this int x)
		{
			if (x <= 0)
				throw new ArithmeticException("cannot find factorization of a non-positive number");
		    var primes = x.primefactors().ToLookup(a=>a).Select(a=>Tuple.Create(a.Key,a.Count())).ToArray();
		    foreach (var primesubsets in primes.Select(a => Loops.IRange(a.Item2).Select(z => a.Item1.pow(z)).ToArray()).ToArray().Join())
		    {
		        yield return primesubsets.getProduct((a, b) => a*b);
		    }
		}
	    public static IEnumerable<int> primefactors(this int x)
	    {
	        while (x!=1)
	        {
	            var f = x.SmallestFactor();
	            yield return f;
	            x = x / f;
	        }
	    }
        public static IEnumerable<long> primefactors(this long x)
        {
            while (x != 1)
            {
                var f = x.SmallestFactor();
                yield return f;
                x = x / f;
            }
        }
        public static int divisibility(this int n, int b)
	    {
            if (n == 1 || b > n || n % b != 0)
                return 0;
	        var sq = b * b;
	        var th = sq * b;
            var k = divisibility(th, n);
            var p = n / Math.Pow(th, k);
            return 3 * k + (p % sq == 0 ? 2 : (p % b == 0 ? 1 : 0));
        }
        public static int divisibility(this BigInteger n, BigInteger b)
        {
            var l = BigInteger.Log(n, 2);
            if (l > 32)
            {
                var q = new HalvingQuerier<BigInteger>(b, (x, y) => x * y, 1);
                return ArrayExtensions.binSearch(a => (n % q[a]).IsZero, 0, (int)(l / BigInteger.Log(b,2)) + 2);
            }
            if (n == 1 || b > n || n % b != 0)
                return 0;
            var sq = b * b;
            var th = sq * b;
            var fo = th * b;
            var k = divisibility(fo, n);
            var p = n / BigInteger.Pow(fo, k);
            return 4 * k + (p % th == 0 ? 3 :(p % sq == 0 ? 2 : (p % b == 0 ? 1 : 0)));
        }
        public static ulong factorial(this int x, int iteration = 1)
		{
			ulong[,] val =
			{
				{
					1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200,
					1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000,
					2432902008176640000, 14197454024290336768, 17196083355034583040, 8128291617894825984,
					10611558092380307456, 7034535277573963776, 16877220553537093632, 12963097176472289280,
					12478583540742619136, 11390785281054474240, 9682165104862298112, 4999213071378415616,
					12400865694432886784, 3400198294675128320, 4926277576697053184, 6399018521010896896,
					9003737871877668864, 1096907932701818880, 4789013295250014208, 2304077777655037952,
					18376134811363311616, 15551764317513711616, 7538058755741581312, 10541877243825618944,
					2673996885588443136, 9649395409222631424, 1150331055211806720, 17172071447535812608,
					12602690238498734080, 8789267254022766592, 15188249005818642432, 18284192274659147776,
					9994050523088551936, 13175843659825807360, 10519282829630636032, 6711489344688881664,
					6908521828386340864, 6404118670120845312, 2504001392817995776, 162129586585337856
				},
				{
					1, 1, 2, 3, 8, 15, 48, 105, 384, 945, 3840, 10395, 46080, 135135, 645120, 2027025, 10321920,
					34459425, 185794560, 654729075, 3715891200, 13749310575, 81749606400, 316234143225, 1961990553600,
					7905853580625, 51011754393600, 213458046676875, 1428329123020800, 6190283353629375,
					42849873690624000, 191898783962510625, 1371195958099968000, 6332659870762850625, 9727174427979808768,
					282166592185152483, 18136886080501186560, 10440163910850641871, 6672140331791679488,
					1338022901564897417, 8631196239733456896, 17965450816741690865, 12022104668323708928,
					16197878097801090939, 12463771342375747584, 9481495526376579231, 1484415464288288768,
					2908431970669985073, 15911710064709206016, 13385958046862407265, 2375508065949581312,
					154329662729360723, 12845954987120918528, 8179472124656118319, 11152038577276190720,
					7149109087057268761, 15771605895051476992, 1670848340654183825, 10862682301217636352,
					6346331730049087595
				},
				{
					1, 1, 2, 3, 4, 10, 18, 28, 80, 162, 280, 880, 1944, 3640, 12320, 29160, 58240, 209440, 524880, 1106560,
					4188800, 11022480, 24344320, 96342400, 264539520, 608608000, 2504902400, 7142567040, 17041024000,
					72642169600, 214277011200, 528271744000, 2324549427200, 7071141369600, 17961239296000,
					81359229952000, 254561089305600, 664565853952000, 3091650738176000, 9927882482918400,
					26582634158080000, 126757680265216000, 416971064282572800, 1143053268797440000, 5577337931669504000,
					316953819006224384, 15686962217263136768, 3880465756532965376, 15213783312298770432,
					12344641623802085376, 9555847089552752640, 1139697831436124160, 14732065931583684608,
					8397805756137996288, 6203450676422049792, 17053631067591933952, 9108520500989001728,
					3108551155575357440, 11433166013725933568, 2447131420774105088
				},
				{
					1, 1, 2, 3, 4, 5, 12, 21, 32, 45, 120, 231, 384, 585, 1680, 3465, 6144, 9945, 30240, 65835, 122880,
					208845, 665280, 1514205, 2949120, 5221125, 17297280, 40883535, 82575360, 151412625, 518918400,
					1267389585, 2642411520, 4996616625, 17643225600, 44358635475, 95126814720, 184874815125,
					670442572800, 1729986783525, 3805072588800, 7579867420125, 28158588057600, 74389431691575,
					167423193907200, 341094033905625, 1295295050649600, 3496303289504025, 8036313307545600,
					16713607661375625, 64764752532480000, 178311467764705275, 417888291992371200, 885821206052908125,
					3497296636753920000, 9807130727058790125, 4955000277863235584, 13598320597596659893,
					18375764194631843840, 6771646611472517279
				},
				{
					1, 1, 2, 3, 4, 5, 6, 14, 24, 36, 50, 66, 168, 312, 504, 750, 1056, 2856, 5616, 9576, 15000, 22176,
					62832, 129168, 229824, 375000, 576576, 1696464, 3616704, 6664896, 11250000, 17873856, 54286848,
					119351232, 226606464, 393750000, 643458816, 2008613376, 4535346816, 8837652096, 15750000000,
					26381811456, 84361761792, 195019913088, 388856692224, 708750000000, 1213563326976, 3965002804224,
					9360955828224, 19053977918976, 35437500000000, 61891729675776, 206180145819648, 496130658895872,
					1028914807624704, 1949062500000000, 3465936861843456, 11752268311719936, 28775578215960576,
					60705973649857536
				}
			};
			if (iteration - 1 < val.GetLength(0) && x < val.GetLength(1))
				return val[iteration - 1, x];
			ulong ret = 1;
			for (int i = x; i > 1; i -= iteration)
			{
				ret *= (ulong)i;
			}
			return ret;
		}
		public static int fibonachi(int x)
		{
			int[] val =
			{
				0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,
				17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,
				9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733,
				1134903170, 1836311903
			};
			return x < val.Length ? val[x] : fibonachi(x, 0, 1);
		}
		public static double fibonachi(int x, params double[] starters)
		{
			return fibonachi<double>(x,starters);
		}
		public static int fibonachi(int x, params int[] starters)
		{
			return fibonachi<int>(x, starters);
		}
		public static T fibonachi<T>(int x, params T[] starters)
		{
			if (x < starters.Length)
				return starters[x];
			var f = Fields.getField<T>();
			Matrix<T> b= new MapMatrix<T>((i,j) => j == 0 || j - 1 == i ? f.one : f.zero,starters.Length);
            MatrixBuilder<T> pa = new MatrixBuilder<T>(starters.Length,1);
			for (int i = 0; i < starters.Length; i++)
			{
				pa[i, 0] = starters[starters.Length - i - 1];
			}
		    Matrix<T> a = pa.toMutableMatrix();
			return b.pow(x - starters.Length + 1).Multiply(a)[0, 0];
		}
		public static int[] fibonachiarray(int count, params int[] starters)
		{
			int[] ret = new int[count];
			for (int i = 0; i < starters.Length; i++)
			{
				ret[i] = starters[i];
			}
			for (int i = starters.Length; i < ret.Length; i++)
			{
				ret[i] = 0;
				for (int j = i - 1; j >= i - starters.Length; j--)
				{
					ret[i] += ret[j];
				}
			}
			return ret;
		}
		public static int[] fibonachiarray(int count)
		{
			return fibonachiarray(count, 0, 1);
		}
	    public static IEnumerable<BigInteger> Fractran(IEnumerable<BigRational> f, BigInteger initial)
	    {
	        bool cont = true;
	        while (cont)
	        {
	            cont = false;
	            yield return initial;
	            foreach (BigRational fraction in f)
	            {
	                if ((fraction * initial).GetFractionPart() == BigRational.Zero)
	                {
                        initial = (fraction * initial).GetWholePart();
	                    cont = true;
                        break;
	                }
	            }
	        }
	    }
		/// <summary>
		/// returns null if it is not a perfect power
		/// returns {base, power}
		/// </summary>
		public static Tuple<int, int> getperfectpower(int x, bool includeone = false)
		{
			int[] hasperfectpower =
			{
				4, 8, 9, 16, 25, 27, 32, 36, 49, 64, 81, 100, 121, 128, 144, 169, 196, 225, 256, 289, 324, 343, 361, 400,
				441, 484, 512, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1331, 1369,
				1444, 1521, 1600, 1681, 1728, 1764, 1849, 1936, 2025, 2048, 2116, 2187, 2197, 2209, 2304, 2401, 2500,
				2601, 2704, 2744, 2809, 2916, 3025, 3125, 3136, 3249, 3364, 3375, 3481, 3600, 3721, 3844, 3969, 4096,
				4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561,
				6724, 6859, 6889, 7056, 7225, 7396, 7569, 7744, 7776, 7921, 8000, 8100, 8192, 8281, 8464, 8649, 8836,
				9025, 9216, 9261, 9409, 9604, 9801, 10000, 10201, 10404, 10609, 10648, 10816, 11025, 11236, 11449, 11664,
				11881, 12100, 12167, 12321, 12544, 12769, 12996, 13225, 13456, 13689, 13824, 13924, 14161, 14400, 14641,
				14884, 15129, 15376, 15625, 15876, 16129, 16384, 16641, 16900, 17161, 17424, 17576, 17689, 17956, 18225,
				18496, 18769, 19044, 19321, 19600, 19683, 19881, 20164, 20449, 20736, 21025, 21316, 21609, 21904, 21952,
				22201, 22500, 22801, 23104, 23409, 23716, 24025, 24336, 24389, 24649, 24964, 25281, 25600, 25921, 26244,
				26569, 26896, 27000, 27225, 27556, 27889, 28224, 28561, 28900, 29241, 29584, 29929, 30276, 30625, 30976,
				31329, 31684, 32041, 32400, 32761, 32768, 33124, 33489, 33856, 34225, 34596, 34969, 35344, 35721, 35937,
				36100, 36481, 36864, 37249, 37636, 38025, 38416, 38809, 39204, 39601, 40000, 40401, 40804, 41209, 41616,
				42025, 42436, 42849, 42875, 43264, 43681, 44100, 44521, 44944, 45369, 45796, 46225, 46656, 47089, 47524,
				47961, 48400, 48841, 49284, 49729, 50176, 50625, 50653, 51076, 51529, 51984, 52441, 52900, 53361, 53824,
				54289, 54756, 54872, 55225, 55696, 56169, 56644, 57121, 57600, 58081, 58564, 59049, 59536, 60025, 60516,
				61009, 61504, 62001, 62500, 63001, 63504, 64000, 64009, 64516, 65025, 65536, 66049, 66564, 67081, 67600,
				68121, 68644, 69169, 69696, 70225, 70756, 71289, 71824, 72361, 72900, 73441, 73984, 74088, 74529, 75076,
				75625, 76176, 76729, 77284, 77841, 78125, 78400, 78961, 79507, 79524, 80089, 80656, 81225, 81796, 82369,
				82944, 83521, 84100, 84681, 85184, 85264, 85849, 86436, 87025, 87616, 88209, 88804, 89401, 90000, 90601,
				91125, 91204, 91809, 92416, 93025, 93636, 94249, 94864, 95481, 96100, 96721, 97336, 97344, 97969, 98596,
				99225, 99856
			};
			int[,] sol =
			{
				{2, 2}, {2, 3}, {3, 2}, {2, 4}, {5, 2}, {3, 3}, {2, 5}, {6, 2}, {7, 2}, {2, 6}, {3, 4},
				{10, 2}, {11, 2}, {2, 7}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {2, 8}, {17, 2}, {18, 2}, {7, 3}, {19, 2},
				{20, 2}, {21, 2}, {22, 2}, {2, 9}, {23, 2}, {24, 2}, {5, 4}, {26, 2}, {3, 6}, {28, 2}, {29, 2}, {30, 2},
				{31, 2}, {2, 10}, {33, 2}, {34, 2}, {35, 2}, {6, 4}, {11, 3}, {37, 2}, {38, 2}, {39, 2}, {40, 2},
				{41, 2}, {12, 3}, {42, 2}, {43, 2}, {44, 2}, {45, 2}, {2, 11}, {46, 2}, {3, 7}, {13, 3}, {47, 2},
				{48, 2}, {7, 4}, {50, 2}, {51, 2}, {52, 2}, {14, 3}, {53, 2}, {54, 2}, {55, 2}, {5, 5}, {56, 2}, {57, 2},
				{58, 2}, {15, 3}, {59, 2}, {60, 2}, {61, 2}, {62, 2}, {63, 2}, {2, 12}, {65, 2}, {66, 2}, {67, 2},
				{68, 2}, {69, 2}, {70, 2}, {71, 2}, {72, 2}, {73, 2}, {74, 2}, {75, 2}, {76, 2}, {77, 2}, {78, 2},
				{79, 2}, {80, 2}, {3, 8}, {82, 2}, {19, 3}, {83, 2}, {84, 2}, {85, 2}, {86, 2}, {87, 2}, {88, 2}, {6, 5},
				{89, 2}, {20, 3}, {90, 2}, {2, 13}, {91, 2}, {92, 2}, {93, 2}, {94, 2}, {95, 2}, {96, 2}, {21, 3},
				{97, 2}, {98, 2}, {99, 2}, {10, 4}, {101, 2}, {102, 2}, {103, 2}, {22, 3}, {104, 2}, {105, 2}, {106, 2},
				{107, 2}, {108, 2}, {109, 2}, {110, 2}, {23, 3}, {111, 2}, {112, 2}, {113, 2}, {114, 2}, {115, 2},
				{116, 2}, {117, 2}, {24, 3}, {118, 2}, {119, 2}, {120, 2}, {11, 4}, {122, 2}, {123, 2}, {124, 2},
				{125, 2}, {126, 2}, {127, 2}, {2, 14}, {129, 2}, {130, 2}, {131, 2}, {132, 2}, {26, 3}, {133, 2},
				{134, 2}, {135, 2}, {136, 2}, {137, 2}, {138, 2}, {139, 2}, {140, 2}, {3, 9}, {141, 2}, {142, 2},
				{143, 2}, {12, 4}, {145, 2}, {146, 2}, {147, 2}, {148, 2}, {28, 3}, {149, 2}, {150, 2}, {151, 2},
				{152, 2}, {153, 2}, {154, 2}, {155, 2}, {156, 2}, {29, 3}, {157, 2}, {158, 2}, {159, 2}, {160, 2},
				{161, 2}, {162, 2}, {163, 2}, {164, 2}, {30, 3}, {165, 2}, {166, 2}, {167, 2}, {168, 2}, {13, 4},
				{170, 2}, {171, 2}, {172, 2}, {173, 2}, {174, 2}, {175, 2}, {176, 2}, {177, 2}, {178, 2}, {179, 2},
				{180, 2}, {181, 2}, {2, 15}, {182, 2}, {183, 2}, {184, 2}, {185, 2}, {186, 2}, {187, 2}, {188, 2},
				{189, 2}, {33, 3}, {190, 2}, {191, 2}, {192, 2}, {193, 2}, {194, 2}, {195, 2}, {14, 4}, {197, 2},
				{198, 2}, {199, 2}, {200, 2}, {201, 2}, {202, 2}, {203, 2}, {204, 2}, {205, 2}, {206, 2}, {207, 2},
				{35, 3}, {208, 2}, {209, 2}, {210, 2}, {211, 2}, {212, 2}, {213, 2}, {214, 2}, {215, 2}, {216, 2},
				{217, 2}, {218, 2}, {219, 2}, {220, 2}, {221, 2}, {222, 2}, {223, 2}, {224, 2}, {15, 4}, {37, 3},
				{226, 2}, {227, 2}, {228, 2}, {229, 2}, {230, 2}, {231, 2}, {232, 2}, {233, 2}, {234, 2}, {38, 3},
				{235, 2}, {236, 2}, {237, 2}, {238, 2}, {239, 2}, {240, 2}, {241, 2}, {242, 2}, {243, 2}, {244, 2},
				{245, 2}, {246, 2}, {247, 2}, {248, 2}, {249, 2}, {250, 2}, {251, 2}, {252, 2}, {40, 3}, {253, 2},
				{254, 2}, {255, 2}, {2, 16}, {257, 2}, {258, 2}, {259, 2}, {260, 2}, {261, 2}, {262, 2}, {263, 2},
				{264, 2}, {265, 2}, {266, 2}, {267, 2}, {268, 2}, {269, 2}, {270, 2}, {271, 2}, {272, 2}, {42, 3},
				{273, 2}, {274, 2}, {275, 2}, {276, 2}, {277, 2}, {278, 2}, {279, 2}, {5, 7}, {280, 2}, {281, 2},
				{43, 3}, {282, 2}, {283, 2}, {284, 2}, {285, 2}, {286, 2}, {287, 2}, {288, 2}, {17, 4}, {290, 2},
				{291, 2}, {44, 3}, {292, 2}, {293, 2}, {294, 2}, {295, 2}, {296, 2}, {297, 2}, {298, 2}, {299, 2},
				{300, 2}, {301, 2}, {45, 3}, {302, 2}, {303, 2}, {304, 2}, {305, 2}, {306, 2}, {307, 2}, {308, 2},
				{309, 2}, {310, 2}, {311, 2}, {46, 3}, {312, 2}, {313, 2}, {314, 2}, {315, 2}, {316, 2}
			};
			if (x == 1)
			{
				return includeone ? new Tuple<int, int>(1, 1) : null;
			}
			if (x > hasperfectpower.Last())
			{
				int sqrt = (int)Math.Sqrt(x);
				for (int i = 2; i <= sqrt; i++)
				{
					double log = Math.Log(x, i);
					if (log.whole())
					{
						return log != 1 ? new Tuple<int, int>(i, (int)log) : null;
					}
				}
				return null;
			}
			int ind = hasperfectpower.binSearch(x);
		    return ind == -1 ? null : new Tuple<int, int>(sol[ind, 0], sol[ind, 1]);
		}
        public static BigInteger greatestcommondivisor(params BigInteger[] val)
        {
            while (true)
            {
                switch (val.Length)
                {
                    case 0:
                        return 1;
                    case 1:
                        return val[0];
                    case 2:
                        var a = val[0];
                        var b = val[1];
                        if (a < 0)
                        {
                            a *= -1;
                        }
                        if (b < 0)
                        {
                            b *= -1;
                        }
                        minmax(ref b, ref a);
                        while (b != 0)
                        {
                            BigInteger temp = a % b;
                            a = b;
                            b = temp;
                        }
                        return a;
                }
                val = val.SplitAt(val.Length / 2).ToEnumerable().SelectToArray(greatestcommondivisor);
            }
        }
        public static long greatestcommondivisor(params long[] val)
		{
			while (true)
			{
			    if (val.Length == 0)
			        return 1;
			    if (val.Length == 1)
			        return val[0];
			    if (val.Length == 2)
			    {
			        var a = val[0];
			        var b = val[1];
			        if (a < 0)
			            a *= -1;
			        if (b < 0)
			            b *= -1;
			        minmax(ref b, ref a);
			        while (b != 0)
			        {
			            long temp = a % b;
			            a = b;
			            b = temp;
			        }
			        return a;
			    }
			    val = val.SplitAt(val.Length/2).ToEnumerable().SelectToArray(greatestcommondivisor);
			}
		}
	    public static int greatestcommondivisor(params int[] val)
	    {
	        return (int) greatestcommondivisor(val.SelectToArray(a => (long) a));
	    }
	    public static bool ishappy(int x, int power = 2, int baseused = 10)
		{
			ISet<int> cache = new HashSet<int>();
			int sum = 0;
			while (x != 1)
			{
				if (cache.Contains(x))
				{
					return false;
				}
				cache.Add(x);
				while (x != 0)
				{
					int digit = x % baseused;
					sum += (int)Math.Pow(digit, power);
					x /= baseused;
				}
				x = sum;
				sum = 0;
			}
			return true;
		}
		public static bool isperfectnumber(this int x)
		{
			int[] val =
			{
				6, 28, 496, 8128, 33550336
			};
			if (x > val.Last())
			{
				IEnumerable<int> f = x.factors();
				int s = f.getSum()-x;
				return s == x;
			}
			return val.binSearch(x) >= 0;
		}
		private static bool? isprimebylist(this int x)
		{
			int[] val =
			{
				2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,
				101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
				211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,
				337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457,
				461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
				601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
				739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,
				881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019,
				1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123,
				1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259,
				1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399,
				1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499,
				1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619,
				1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,
				1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889,
				1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027,
				2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143,
				2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293,
				2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411,
				2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557,
				2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693,
				2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803,
				2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957,
				2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109,
				3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257,
				3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389,
				3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533,
				3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659,
				3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797,
				3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929,
				3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079,
				4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229,
				4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363,
				4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517,
				4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657,
				4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801,
				4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967,
				4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099,
				5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261,
				5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417,
				5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531,
				5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689,
				5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839,
				5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987,
				6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133,
				6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277,
				6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397,
				6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577,
				6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733,
				6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871,
				6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013,
				7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193,
				7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349,
				7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523,
				7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643,
				7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793,
				7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949,
				7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117,
				8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273,
				8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431,
				8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609,
				8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737,
				8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867,
				8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041,
				9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199,
				9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343,
				9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473,
				9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643,
				9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791,
				9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931,
				9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099,
				10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243,
				10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343,
				10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501,
				10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657,
				10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799,
				10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949,
				10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093,
				11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251,
				11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393,
				11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527,
				11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701,
				11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833,
				11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969,
				11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109,
				12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253,
				12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401,
				12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517,
				12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641,
				12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791,
				12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923,
				12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049,
				13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187,
				13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339,
				13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499,
				13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679,
				13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781,
				13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913,
				13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081,
				14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251,
				14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419,
				14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551,
				14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699,
				14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813,
				14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947,
				14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107,
				15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259,
				15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361,
				15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497,
				15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647,
				15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773,
				15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913,
				15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069,
				16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 16193, 16217, 16223,
				16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381,
				16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547,
				16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691,
				16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871,
				16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993,
				17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137,
				17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317,
				17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 17419, 17431,
				17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573,
				17579, 17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729,
				17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863, 17881, 17891,
				17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013,
				18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143,
				18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287,
				18289, 18301, 18307, 18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427,
				18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 18553,
				18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749,
				18757, 18773, 18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947,
				18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 19087, 19121,
				19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267,
				19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423,
				19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 19501, 19507, 19531,
				19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699,
				19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843,
				19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991,
				19993, 19997
			};
			if (x > val.Last())
				return null;
			return val.binSearch(x) >= 0;
		}
        public static bool isPrime(this int x)
        {
            var l = x.isprimebylist();
            if (l.HasValue)
                return l.Value;
            return isProbablyPrime(x, 3) && (x.primefactors().First() != x);
        }
        public static bool isPrime(this long x)
		{
            if (x < int.MaxValue)
            {
                var l = ((int)x).isprimebylist();
                if (l.HasValue)
                    return l.Value;
            }
            return isProbablyPrime(x,3) && (x.primefactors().First()!=x);
		}
	    public static bool isProbablyPrime(this int x, int iterations)
	    {
	        return isProbablyPrime(x, iterations, new GlobalRandomGenerator());
	    }
	    public static bool isProbablyPrime(this int x, int iterations, RandomGenerator generator)
	    {
	        return isProbablyPrime((long)x, iterations, generator);
	    }
	    public static bool isProbablyPrime(this long x, int iterations)
	    {
	        return isProbablyPrime(x, iterations, new GlobalRandomGenerator());
	    }
	    public static bool isProbablyPrime(this long x, int iterations, RandomGenerator generator)
        {
            if (x <= 0)
                throw new Exception("can't check a negative number");
	        foreach (int i in Loops.Range(iterations))
            {
                int a = generator.Int(1, (int)Math.Min(int.MaxValue, x));
                if (greatestcommondivisor(a, x) != 1 || ((long)a).powmod(x - 1, x) != 1)
                    return false;
            }
            return true;
        }
	    public static bool isProbablyPrime(this BigInteger x, int iterations)
	    {
	        return isProbablyPrime(x, iterations, new GlobalRandomGenerator());
	    }
	    public static bool isProbablyPrime(this BigInteger x, int iterations, RandomGenerator generator)
        {
            if (x <= 0)
                throw new Exception("can't check a negative number");
            foreach (int i in Loops.Range(iterations))
            {
                int a = generator.Int(1, (int)BigInteger.Min(new BigInteger(int.MaxValue), x));
                if (greatestcommondivisor(a, x) != 1 || BigInteger.ModPow(a,x-1,x) != 1)
                    return false;
            }
            return true;
        }
        public static bool iswithinexclusive(this int x, int border1, int border2)
		{
			double min;
			double max;
			if (border1 < border2)
			{
				min = border1;
				max = border2;
			}
			else
			{
				min = border2;
				max = border1;
			}
			return x > min && x < max;
		}
		public static bool iswithin(this int x, int border1, int border2)
		{
			return iswithinexclusive(x, border1, border2) || x == border1 || x == border2;
		}
        public static bool iswithin<T>(this T x, T border1, T border2)
        {
            return iswithinexclusive(x, border1, border2) || x.Equals(border1) || x.Equals(border2);
        }
        public static bool iswithinPartialExclusive(this int x, int border1, int border2)
        {
            return iswithinexclusive(x, border1, border2) || (x == border1 && x != border2);
        }
        public static bool iswithinPartialExclusive(this double x, double border1, double border2)
        {
            return iswithinexclusive(x, border1, border2) || (x == border1 && x != border2);
        }
        public static bool iswithinPartialExclusive(this float x, float border1, float border2)
        {
            return iswithinexclusive(x, border1, border2) || (x == border1 && x != border2);
        }
        public static bool iswithinPartialExclusive<T>(this T x, T border1, T border2)
        {
            return iswithinexclusive(x, border1, border2) || (x.Equals(border1) && !x.Equals(border2));
        }
        /// <summary>
        /// both min and max are inclusive
        /// </summary>
        public static bool iswithin(this double x, double border1, double border2)
		{
			return iswithinexclusive(x, border1, border2) || x == border1 || x == border2;
		}
        public static bool iswithin(this float x, float border1, float border2)
        {
            return iswithinexclusive(x, border1, border2) || x == border1 || x == border2;
        }
        public static bool iswithinexclusive(this double x, double border1, double border2)
        {
            minmax(ref border1, ref border2);
			return x > border1 && x < border2;
		}
        public static bool iswithinexclusive(this float x, float border1, float border2)
        {
            minmax(ref border1, ref border2);
            return x > border1 && x < border2;
        }
        public static bool iswithinexclusive<T>(this T x, T border1, T border2)
        {
            minmax(ref border1, ref border2);
            return x.ToFieldWrapper() >  border1 && x.ToFieldWrapper() < border2;
        }
		public static int leastcommonmultiple(params int[] vals)
		{
			return (vals.getProduct((a,b)=>a*b)) / greatestcommondivisor(vals);
		}
		public static int legendre(int q, int p)
		{
			if (p % 2 == 0)
				throw new ArithmeticException("cannot legendre an even base");
			if (p.isPrime())
			{
				int temp = q.powmod((p - 1) / 2, p);
				return p - temp == 1 ? -1 : temp;
			}
			int ret = 1;
			foreach (var prime in primefactors(p).ToOccurances())
			{
				ret *= legendre(q, prime.Key).pow((int)prime.Value);
			}
			return ret;
		}
		public static string limittostringchars(this int a, int charcount)
		{
			return a.ToString(new string('0', charcount));
		}
        public static IEnumerable<int> primes()
		{
			int[] val =
			{
				2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,
				101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
				211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,
				337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457,
				461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
				601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
				739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,
				881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019,
				1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123,
				1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259,
				1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399,
				1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499,
				1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619,
				1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,
				1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889,
				1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027,
				2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143,
				2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293,
				2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411,
				2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557,
				2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693,
				2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803,
				2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957,
				2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109,
				3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257,
				3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389,
				3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533,
				3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659,
				3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797,
				3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929,
				3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079,
				4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229,
				4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363,
				4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517,
				4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657,
				4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801,
				4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967,
				4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099,
				5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261,
				5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417,
				5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531,
				5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689,
				5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839,
				5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987,
				6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133,
				6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277,
				6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397,
				6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577,
				6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733,
				6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871,
				6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013,
				7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193,
				7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349,
				7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523,
				7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643,
				7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793,
				7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949,
				7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117,
				8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273,
				8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431,
				8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609,
				8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737,
				8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867,
				8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041,
				9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199,
				9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343,
				9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473,
				9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643,
				9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791,
				9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931,
				9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099,
				10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243,
				10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343,
				10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501,
				10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657,
				10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799,
				10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949,
				10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093,
				11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251,
				11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393,
				11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527,
				11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701,
				11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833,
				11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969,
				11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109,
				12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253,
				12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401,
				12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517,
				12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641,
				12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791,
				12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923,
				12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049,
				13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187,
				13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339,
				13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499,
				13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679,
				13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781,
				13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913,
				13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081,
				14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251,
				14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419,
				14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551,
				14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699,
				14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813,
				14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947,
				14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107,
				15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259,
				15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361,
				15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497,
				15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647,
				15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773,
				15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913,
				15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069,
				16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 16193, 16217, 16223,
				16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381,
				16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547,
				16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691,
				16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871,
				16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993,
				17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137,
				17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317,
				17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 17419, 17431,
				17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573,
				17579, 17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729,
				17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863, 17881, 17891,
				17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013,
				18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143,
				18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287,
				18289, 18301, 18307, 18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427,
				18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 18553,
				18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749,
				18757, 18773, 18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947,
				18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 19087, 19121,
				19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267,
				19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423,
				19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 19501, 19507, 19531,
				19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699,
				19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843,
				19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991,
				19993, 19997
			};
            foreach (int p in val)
            {
                yield return p;
            }
			List<int> ret = new List<int>(val);
            int i = val.Last();
			while(true)
			{
			    i+=2;
				int i1 = i;
			    if (i.isProbablyPrime(3) && ret.All(a => (i1 % a) != 0))
			    {
					ret.Add(i);
			        yield return i;
			    }
			}
		}
	    public static IEnumerable<int> primes(int max)
	    {
	        var nums = new SortedSet<int>(Loops.Range(2,max));
	        while (nums.Count > 0)
	        {
	            var y = nums.Min;
	            yield return y;
	            foreach (int i in Loops.Range(y,max,y))
	            {
	                nums.Remove(i);
	            }
	        }
	    }
		public static double logStar(this double x, double @base = Math.E, int iteration = 1)
		{
			if (iteration == 0)
				return Math.Log(x, @base);
			if (iteration < 0)
				throw new Exception("cannot iterate a negative amount");
			if (x <= 1)
				return 0;
			return 1 + logStar(logStar(x, @base, iteration - 1), @base, iteration);
		}
		public static double logStar(this int x, double @base = Math.E, int iteration = 1)
		{
			return logStar((double)x, @base, iteration);
		}
		public static int magnitude(this long x, int newbase = 10)
		{
			if (x <= 0)
				return 0;
			return (int)Math.Floor(Math.Log(x, newbase));
		}
		public static int magnitude(this ulong x, int newbase = 10)
		{
			if (x <= 0)
				return 0;
			return (int)Math.Floor(Math.Log(x, newbase));
		}
		public static int magnitude(this int x, int newbase = 10)
		{
			if (x <= 0)
				return 0;
			return (int)Math.Floor(Math.Log(x, newbase));
		}
		public static int magnitude(this uint x, int newbase = 10)
		{
			if (x <= 0)
				return 0;
			return (int)Math.Floor(Math.Log(x, newbase));
		}
		public static int magnitude(this double x, int newbase = 10)
		{
			if (x <= 0)
				return 0;
			return (int)Math.Floor(Math.Log(x, newbase));
		}
		public static bool minmax(ref int min, ref int max)
		{
			if (min < max)
			{
				return false;
			}
			var temp = max;
			max = min;
			min = temp;
			return true;
		}
        public static bool minmax(ref long min, ref long max)
        {
            if (min < max)
            {
                return false;
            }
            var temp = max;
            max = min;
            min = temp;
            return true;
        }
        public static bool minmax(ref BigInteger min, ref BigInteger max)
        {
            if (min < max)
            {
                return false;
            }
            var temp = max;
            max = min;
            min = temp;
            return true;
        }
        public static bool minmax(ref double min, ref double max)
		{
			if (min < max)
			{
				return false;
			}
			var temp = max;
			max = min;
			min = temp;
			return true;
		}
        public static bool minmax(ref float min, ref float max)
        {
            if (min < max)
            {
                return false;
            }
            var temp = max;
            max = min;
            min = temp;
            return true;
        }
        public static bool minmax<T>(ref T min, ref T max)
        {
            if (min.ToFieldWrapper() < max)
            {
                return false;
            }
            var temp = max;
            max = min;
            min = temp;
            return true;
        }
        public enum ScaleType { LongScale = 0, ShortScale =1 };
		public static string name(this long x, ScaleType scaletouse = ScaleType.ShortScale, int definitionlimit = 2)
		{
		    string[][] unitsnames =
		    {
		        new[] {"", " Thousand", " Million", " Billion", " Trillion", " Quadrillion", " Quintillion"},
		        new[] {"", " Thousand", " Million", " Milliard", " Billion", " Billiard", " Trillion"}
		    };
			if (x < 0)
				return "Negative " + name(-x, scaletouse);
			if (x < 1000)
				return x.ToString();
		    string[] scale = unitsnames[(int)scaletouse];
		    return
		        converttobase(x, 1000)
		            .CountBind()
		            .SelectToArray(a => Tuple.Create(a.Item1, scale[a.Item2]))
		            .Reverse()
		            .Take(definitionlimit)
		            .Select(a => $"{a.Item1} {a.Item2}")
		            .ToPrintable(opening: "", closing: "");
		}
		public static string name(this int x, ScaleType scaletouse = ScaleType.ShortScale)
		{
			return name((long)x, scaletouse);
		}
		public static string ordinal(this int x)
		{
			string ret = x.ToString();
			string toAddToEnd;
			if (x % 100 < 20 && x % 100 > 10)
				toAddToEnd = "th";
			else
				switch (x % 10)
				{
					case 1:
						toAddToEnd = "st";
						break;
					case 2:
						toAddToEnd = "nd";
						break;
					case 3:
						toAddToEnd = "rd";
						break;
					default:
						toAddToEnd = "th";
						break;
				}
			return ret + toAddToEnd;
		}
	    public static int primorial(int x)
	    {
	        return primes(x+1).getProduct((a,b)=>a*b);
	    }
        public static int partitionbound(int x, int partcount, IEnumerable<int> lowerbounds, IEnumerable<int> upperbounds)
        {
            if (partcount <= 0)
                return 0;
            if (!x.iswithin(lowerbounds.Take(partcount).Sum(), upperbounds.Take(partcount).Sum()))
                return 0;
            if (partcount == 1)
                return x.iswithin(lowerbounds.First(), upperbounds.First()) ? 1 : 0;
            return
                Loops.IRange(lowerbounds.First(), upperbounds.First())
                    .Sum(i => partitionbound(x - i, partcount - 1, lowerbounds.Skip(1), upperbounds.Skip(1)));
        }
        public static int tetration(this int x, int y)
		{
			int ret = 1;
			for (int i = 0; i < y; i++)
			{
				ret = x.pow(ret);
			}
			return ret;
		}
	    public static double TrueMod(this double a, double b)
	    {
	        var ret = a;
            if (ret < 0)
                ret = b + a % b;
            if (ret >= b)
                ret = ret % b;
	        return ret;
	    }
        public static int TrueMod(this int a, int b)
        {
            var ret = a;
            if (ret < 0)
                ret = b + a % b;
            if (ret >= b)
                ret = ret % b;
            return ret;
        }
		public enum RoundType { Floor, Natural, Ceil, None };
		public static double round(this double x, int decimaldigits = 0, int digitbase = 10, RoundType type = RoundType.Floor)
		{
			double toround = x * Math.Pow(digitbase, decimaldigits);
			int rounded = (int)toround;
			switch (type)
			{
				case RoundType.Ceil:
					rounded = (int)Math.Ceiling(toround);
					break;
				case RoundType.Floor:
					rounded = (int)Math.Floor(toround);
					break;
				case RoundType.Natural:
					rounded = (int)Math.Round(toround);
					break;
			}
			double ret = rounded / Math.Pow(digitbase, decimaldigits);
			return ret;
		}
		public static double round(this int x, int decimaldigits = 0, int digitbase = 10, RoundType type = RoundType.Floor)
		{
			return round((double)x, decimaldigits, digitbase, type);
		}
		public enum RoundMethod { ToMagnitude, ToSecondMagnitude, UntilNotWhole, UntilNotZero, none }
		public static double round(this int x, RoundMethod method)
		{
			int decimaldigits = 0;
			switch (method)
			{
				case RoundMethod.ToMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10));
					break;
				case RoundMethod.ToSecondMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10)) + 1;
					break;
			}
			double toround = x * Math.Pow(10, decimaldigits);
			int rounded = (int)Math.Round(toround);
			double ret = rounded / Math.Pow(10, decimaldigits);
			return ret;
		}
		public static double round(this long x, RoundMethod method)
		{
			int decimaldigits = 0;
			switch (method)
			{
				case RoundMethod.ToMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10));
					break;
				case RoundMethod.ToSecondMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10)) + 1;
					break;
			}
			double toround = x * Math.Pow(10, decimaldigits);
			int rounded = (int)Math.Round(toround);
			double ret = rounded / Math.Pow(10, decimaldigits);
			return ret;
		}
		public static double round(this ulong x, RoundMethod method)
		{
			int decimaldigits = 0;
			switch (method)
			{
				case RoundMethod.ToMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10));
					break;
				case RoundMethod.ToSecondMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10)) + 1;
					break;
			}
			double toround = x * Math.Pow(10, decimaldigits);
			int rounded = (int)Math.Round(toround);
			double ret = rounded / Math.Pow(10, decimaldigits);
			return ret;
		}
		public static double round(this double x, RoundMethod method)
		{
			int decimaldigits = 0;
			switch (method)
			{
				case RoundMethod.UntilNotWhole:
					if (!x.whole())
						decimaldigits = -(int)Math.Floor(Math.Log(x % 1, 10));
					break;
				case RoundMethod.UntilNotZero:
					if (x < 1 && x > -1)
						decimaldigits = -(int)Math.Floor(Math.Log(x % 1, 10));
					break;
				case RoundMethod.ToMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10));
					break;
				case RoundMethod.ToSecondMagnitude:
					decimaldigits = -(int)Math.Floor(Math.Log(x, 10)) + 1;
					break;
			}
			double toround = x * Math.Pow(10, decimaldigits);
			int rounded = (int)Math.Round(toround);
			double ret = rounded / Math.Pow(10, decimaldigits);
			return ret;
		}
		public static bool whole(this double x)
		{
			return (x%1 == 0);
		}
		public static bool wholetomagnitude(this int x, int magnitudeadjust = 0, int originalbase = 10)
		{
			int powerof = (int)Math.Pow(originalbase, x.magnitude(originalbase) - magnitudeadjust);
			if (powerof == 0)
				return true;
			return (x % powerof == 0);
		}
		public static bool wholetomagnitude(this long x, int magnitudeadjust = 0, int originalbase = 10)
		{
			long powerof = (long)Math.Pow(originalbase, x.magnitude(originalbase) - magnitudeadjust);
			if (powerof == 0)
				return true;
			return (x % powerof == 0);
		}
		public static bool wholetomagnitude(this ulong x, int magnitudeadjust = 0, int originalbase = 10)
		{
			ulong powerof = (ulong)Math.Pow(originalbase, x.magnitude(originalbase) - magnitudeadjust);
			if (powerof == 0)
				return true;
			return (x % powerof == 0);
		}
		public static bool wholetomagnitude(this uint x, int magnitudeadjust = 0, int originalbase = 10)
		{
			ulong powerof = (ulong)Math.Pow(originalbase, x.magnitude(originalbase) - magnitudeadjust);
			if (powerof == 0)
				return true;
			return (x % powerof == 0);
		}
		public static bool wholemagnitudebetween(int a, int b, int magnitudeadjust = 0, int originalbase = 10)
		{
			while (true)
			{
				if (a > b)
				{
					var a1 = a;
					a = b;
					b = a1;
					continue;
				}
				int powerof = (int) Math.Pow(originalbase, magnitude(b, originalbase) - magnitudeadjust);
				if (powerof == 0)
				{
					return true;
				}
				return (a / powerof < b / powerof);
			}
		}
        public static int CountSetBits(this int value)
        {
            int count = 0;
            while (value != 0)
            {
                count++;
                value &= value - 1;
            }
            return count;
        }
        public static int CountSetBits(this uint value)
        {
            int count = 0;
            while (value != 0)
            {
                count++;
                value &= value - 1;
            }
            return count;
        }
        public static int CountSetBits(this long value)
        {
            int count = 0;
            while (value != 0)
            {
                count++;
                value &= value - 1;
            }
            return count;
        }
        public static int CountSetBits(this ulong value)
        {
            int count = 0;
            while (value != 0)
            {
                count++;
                value &= value - 1;
            }
            return count;
        }
	    public static int SmallestFactor(this int value)
	    {
            if (value <= 1)
                throw new ArithmeticException("cannot find prime factorization of a non-positive number");
            int[] val =
	        {
	            -1, -1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 11, 2, 13, 2, 3, 2, 17, 2, 19, 2, 3, 2, 23, 2, 5, 2, 3, 2, 29, 2, 31, 2, 3, 2, 5, 2, 37, 2, 3,
	            2, 41, 2, 43, 2, 3, 2, 47, 2, 7, 2, 3, 2, 53, 2, 5, 2, 3, 2, 59, 2, 61, 2, 3, 2, 5, 2, 67, 2, 3, 2, 71, 2, 73, 2, 3, 2, 7, 2, 79, 2, 3, 2,
	            83, 2, 5, 2, 3, 2, 89, 2, 7, 2, 3, 2, 5, 2, 97, 2, 3, 2, 101, 2, 103, 2, 3, 2, 107, 2, 109, 2, 3, 2, 113, 2, 5, 2, 3, 2, 7, 2, 11, 2, 3,
	            2, 5, 2, 127, 2, 3, 2, 131, 2, 7, 2, 3, 2, 137, 2, 139, 2, 3, 2, 11, 2, 5, 2, 3, 2, 149, 2, 151, 2, 3, 2, 5, 2, 157, 2, 3, 2, 7, 2, 163,
	            2, 3, 2, 167, 2, 13, 2, 3, 2, 173, 2, 5, 2, 3, 2, 179, 2, 181, 2, 3, 2, 5, 2, 11, 2, 3, 2, 191, 2, 193, 2, 3, 2, 197, 2, 199, 2, 3, 2, 7,
	            2, 5, 2, 3, 2, 11, 2, 211, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 223, 2, 3, 2, 227, 2, 229, 2, 3, 2, 233, 2, 5, 2, 3, 2, 239, 2, 241, 2, 3, 2,
	            5, 2, 13, 2, 3, 2, 251, 2, 11, 2, 3, 2, 257, 2, 7, 2, 3, 2, 263, 2, 5, 2, 3, 2, 269, 2, 271, 2, 3, 2, 5, 2, 277, 2, 3, 2, 281, 2, 283, 2,
	            3, 2, 7, 2, 17, 2, 3, 2, 293, 2, 5, 2, 3, 2, 13, 2, 7, 2, 3, 2, 5, 2, 307, 2, 3, 2, 311, 2, 313, 2, 3, 2, 317, 2, 11, 2, 3, 2, 17, 2, 5,
	            2, 3, 2, 7, 2, 331, 2, 3, 2, 5, 2, 337, 2, 3, 2, 11, 2, 7, 2, 3, 2, 347, 2, 349, 2, 3, 2, 353, 2, 5, 2, 3, 2, 359, 2, 19, 2, 3, 2, 5, 2,
	            367, 2, 3, 2, 7, 2, 373, 2, 3, 2, 13, 2, 379, 2, 3, 2, 383, 2, 5, 2, 3, 2, 389, 2, 17, 2, 3, 2, 5, 2, 397, 2, 3, 2, 401, 2, 13, 2, 3, 2,
	            11, 2, 409, 2, 3, 2, 7, 2, 5, 2, 3, 2, 419, 2, 421, 2, 3, 2, 5, 2, 7, 2, 3, 2, 431, 2, 433, 2, 3, 2, 19, 2, 439, 2, 3, 2, 443, 2, 5, 2, 3,
	            2, 449, 2, 11, 2, 3, 2, 5, 2, 457, 2, 3, 2, 461, 2, 463, 2, 3, 2, 467, 2, 7, 2, 3, 2, 11, 2, 5, 2, 3, 2, 479, 2, 13, 2, 3, 2, 5, 2, 487,
	            2, 3, 2, 491, 2, 17, 2, 3, 2, 7, 2, 499, 2, 3, 2, 503, 2, 5, 2, 3, 2, 509, 2, 7, 2, 3, 2, 5, 2, 11, 2, 3, 2, 521, 2, 523, 2, 3, 2, 17, 2,
	            23, 2, 3, 2, 13, 2, 5, 2, 3, 2, 7, 2, 541, 2, 3, 2, 5, 2, 547, 2, 3, 2, 19, 2, 7, 2, 3, 2, 557, 2, 13, 2, 3, 2, 563, 2, 5, 2, 3, 2, 569,
	            2, 571, 2, 3, 2, 5, 2, 577, 2, 3, 2, 7, 2, 11, 2, 3, 2, 587, 2, 19, 2, 3, 2, 593, 2, 5, 2, 3, 2, 599, 2, 601, 2, 3, 2, 5, 2, 607, 2, 3, 2,
	            13, 2, 613, 2, 3, 2, 617, 2, 619, 2, 3, 2, 7, 2, 5, 2, 3, 2, 17, 2, 631, 2, 3, 2, 5, 2, 7, 2, 3, 2, 641, 2, 643, 2, 3, 2, 647, 2, 11, 2,
	            3, 2, 653, 2, 5, 2, 3, 2, 659, 2, 661, 2, 3, 2, 5, 2, 23, 2, 3, 2, 11, 2, 673, 2, 3, 2, 677, 2, 7, 2, 3, 2, 683, 2, 5, 2, 3, 2, 13, 2,
	            691, 2, 3, 2, 5, 2, 17, 2, 3, 2, 701, 2, 19, 2, 3, 2, 7, 2, 709, 2, 3, 2, 23, 2, 5, 2, 3, 2, 719, 2, 7, 2, 3, 2, 5, 2, 727, 2, 3, 2, 17,
	            2, 733, 2, 3, 2, 11, 2, 739, 2, 3, 2, 743, 2, 5, 2, 3, 2, 7, 2, 751, 2, 3, 2, 5, 2, 757, 2, 3, 2, 761, 2, 7, 2, 3, 2, 13, 2, 769, 2, 3, 2,
	            773, 2, 5, 2, 3, 2, 19, 2, 11, 2, 3, 2, 5, 2, 787, 2, 3, 2, 7, 2, 13, 2, 3, 2, 797, 2, 17, 2, 3, 2, 11, 2, 5, 2, 3, 2, 809, 2, 811, 2, 3,
	            2, 5, 2, 19, 2, 3, 2, 821, 2, 823, 2, 3, 2, 827, 2, 829, 2, 3, 2, 7, 2, 5, 2, 3, 2, 839, 2, 29, 2, 3, 2, 5, 2, 7, 2, 3, 2, 23, 2, 853, 2,
	            3, 2, 857, 2, 859, 2, 3, 2, 863, 2, 5, 2, 3, 2, 11, 2, 13, 2, 3, 2, 5, 2, 877, 2, 3, 2, 881, 2, 883, 2, 3, 2, 887, 2, 7, 2, 3, 2, 19, 2,
	            5, 2, 3, 2, 29, 2, 17, 2, 3, 2, 5, 2, 907, 2, 3, 2, 911, 2, 11, 2, 3, 2, 7, 2, 919, 2, 3, 2, 13, 2, 5, 2, 3, 2, 929, 2, 7, 2, 3, 2, 5, 2,
	            937, 2, 3, 2, 941, 2, 23, 2, 3, 2, 947, 2, 13, 2, 3, 2, 953, 2, 5, 2, 3, 2, 7, 2, 31, 2, 3, 2, 5, 2, 967, 2, 3, 2, 971, 2, 7, 2, 3, 2,
	            977, 2, 11, 2, 3, 2, 983, 2, 5, 2, 3, 2, 23, 2, 991, 2, 3, 2, 5, 2, 997, 2, 3, 2, 7, 2, 17, 2, 3, 2, 19, 2, 1009, 2, 3, 2, 1013, 2, 5, 2,
	            3, 2, 1019, 2, 1021, 2, 3, 2, 5, 2, 13, 2, 3, 2, 1031, 2, 1033, 2, 3, 2, 17, 2, 1039, 2, 3, 2, 7, 2, 5, 2, 3, 2, 1049, 2, 1051, 2, 3, 2,
	            5, 2, 7, 2, 3, 2, 1061, 2, 1063, 2, 3, 2, 11, 2, 1069, 2, 3, 2, 29, 2, 5, 2, 3, 2, 13, 2, 23, 2, 3, 2, 5, 2, 1087, 2, 3, 2, 1091, 2, 1093,
	            2, 3, 2, 1097, 2, 7, 2, 3, 2, 1103, 2, 5, 2, 3, 2, 1109, 2, 11, 2, 3, 2, 5, 2, 1117, 2, 3, 2, 19, 2, 1123, 2, 3, 2, 7, 2, 1129, 2, 3, 2,
	            11, 2, 5, 2, 3, 2, 17, 2, 7, 2, 3, 2, 5, 2, 31, 2, 3, 2, 1151, 2, 1153, 2, 3, 2, 13, 2, 19, 2, 3, 2, 1163, 2, 5, 2, 3, 2, 7, 2, 1171, 2,
	            3, 2, 5, 2, 11, 2, 3, 2, 1181, 2, 7, 2, 3, 2, 1187, 2, 29, 2, 3, 2, 1193, 2, 5, 2, 3, 2, 11, 2, 1201, 2, 3, 2, 5, 2, 17, 2, 3, 2, 7, 2,
	            1213, 2, 3, 2, 1217, 2, 23, 2, 3, 2, 1223, 2, 5, 2, 3, 2, 1229, 2, 1231, 2, 3, 2, 5, 2, 1237, 2, 3, 2, 17, 2, 11, 2, 3, 2, 29, 2, 1249
	        };
	        if (value < val.Length)
	            return val[value];
            bool? pbl = isprimebylist(value);
            if (pbl.HasValue && pbl.Value)
            {
                return value;
            }
            foreach (int prime in primes(value.sqrt().floor()+1))
            {
                while (value % prime == 0)
                {
                    return prime;
                }
            }
	        return value;
	    }
        public static long SmallestFactor(this long value)
        {
            if (value <= 1)
                throw new ArithmeticException("cannot find prime factorization of a non-positive number");
            if (value < int.MaxValue)
                return SmallestFactor((int)value);
            foreach (int prime in primes(Math.Sqrt(value).floor() + 1))
            {
                while (value % prime == 0)
                {
                    return prime;
                }
            }
            return value;
        }
        public static double Entropy(this IEnumerable<double> @this)
	    {
	        var sum = @this.EnumerationHook(preYield: d =>
            {
                if (d < 0)
                    throw new ArgumentException("Enumerable has a negative value");
            }).Sum();
	        if (sum != 1.0)
	            @this = @this.Select(a => a / sum);
	        return @this.Where(a=>a>0).Sum(a => a * Math.Log(a, 2));
	    }
	    public static IEnumerable<int> Pentagonals(int start = 0)
	    {
	        return Loops.Count(start).SelectMany(a=>a==0? a.Enumerate() : new[] {a,-a}).Select(a => (a * (3 * a - 1)) / 2);
	    }
	    public static IEnumerable<IEnumerable<int>> Partitions(this int @this, int? largestpart = int.MaxValue)
	    {
            if (@this < 0)
                yield break;
	        if (@this == 0)
	        {
	            yield return Enumerable.Empty<int>();
	            yield break;
	        }
	        foreach (int i in Loops.IRange(Math.Min(largestpart ?? @this,@this),1,-1))
	        {
	            foreach (var p in (@this-i).Partitions(largestpart.HasValue ? i : (int?)null))
	            {
	                yield return i.Enumerate().Concat(p);
	            }
	        }
	    }
        public static int Partition(this int t)
        {
            var val = new[]
            {
                1, 1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 231, 297, 385, 490, 627, 792, 1002, 1255, 1575, 1958, 2436, 3010,
                3718, 4565, 5604, 6842, 8349, 10143, 12310, 14883, 17977, 21637, 26015, 31185, 37338, 44583, 53174, 63261, 75175, 89134, 105558,
                124754, 147273, 173525
            };
            return new LazyArray<int>((@this, cache) =>
            {
                if (val.isWithinBounds(t))
                    return val[t];
                if (@this < 0)
                    return 0;
                var partindices = Pentagonals(1).Select(a => @this - a).TakeWhile(a => a >= 0);
                var parts = partindices.Select(a => cache[a]);
                var sums = parts.Group2().Select(a => a.Item1 + a.Item2);
                return sums.Group2().Sum(a => a.Item1 - a.Item2);
            })[t];
        }
    }
    public class BigProduct
    {
        private readonly IDictionary<int, BigInteger> _factors = new Dictionary<int, BigInteger>();
        public void Multiply(int n, int pow = 1)
        {
            foreach (int factor in n.primefactors())
            {
                _factors.SumDefinition(factor, pow);
            }
        }
        public void Divide(int n, int pow = 1)
        {
            Multiply(n,-pow);
        }
        public void MultiplyFactorial(int n, int pow = 1)
        {
            //Legendre's formula
            foreach (int prime in NumberMagic.primes(n+1))
            {
                int toadd = 0;
                int factor = prime;
                while (factor <= n)
                {
                    toadd += (n / factor);
                    factor *= prime;
                }
                _factors.SumDefinition(prime, toadd * pow);
            }
        }
        public void DivideFactorial(int n, int pow = 1)
        {
            MultiplyFactorial(n,-pow);
        }
        public void pow(int p)
        {
            foreach (int key in _factors.Keys)
            {
                _factors[key] *= p;
            }
        }
        public BigInteger toNum()
        {
            return _factors.Select(a => ((BigInteger)a.Key).pow(a.Value)).Aggregate(BigInteger.One, (a, b) => a * b);
        }
    }
    public class DivisibilityQuerier
    {
        public DivisibilityQuerier(int denominator)
        {
            this.denominator = denominator;
            PowQuerier = new PowQuerier<int>(denominator);
        }
        public int denominator { get; }
        public PowQuerier<int> PowQuerier { get; }
        public int Divisibility(int n, out int quotient)
        {
            IGuard<int> q = new Guard<int>();
            var ret = ArrayExtensions.binSearch(i =>
            {
                int p = PowQuerier[i];
                if (n % p == 0)
                {
                    q.value = n / p;
                    return true;
                }
                return false;
            }, 0, Math.Log(n, denominator).ceil()+1);
            quotient = q.value;
            return ret;
        }
    }
}